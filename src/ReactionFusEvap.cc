// Fusion-Evaporation reaction process code
// Jonathan W.
// inelastic collision followed by parametrized evaporation
// Edited by Matthew M.
#include "ReactionFusEvap.hh"

ReactionFusEvap::ReactionFusEvap(Projectile *Proj, DetectorConstruction *Det, const G4String &aName)
  : G4VProcess(aName), theProjectile(Proj), theDetector(Det){
  
  proton = G4Proton::ProtonDefinition();
  neutron = G4Neutron::NeutronDefinition();
  alpha = G4Alpha::AlphaDefinition();
  numDecays = 0;
  memset(Egamma, 0, sizeof(Egamma));
  reaction_here = false;
  maxNumRepeats = 1000; // default value
  gammaAngDist = 0;

  FELookupTable.push_back({0.000100000000000,0.014209936882103});
  FELookupTable.push_back({0.000118000000000,0.015442162191249});
  FELookupTable.push_back({0.000136000000000,0.016584377593647});
  FELookupTable.push_back({0.000154000000000,0.017653991860248});
  FELookupTable.push_back({0.000172000000000,0.018663421932547});
  FELookupTable.push_back({0.000190000000000,0.019621906003063});
  FELookupTable.push_back({0.000208000000000,0.020536538832527});
  FELookupTable.push_back({0.000226000000000,0.021412900259421});
  FELookupTable.push_back({0.000244000000000,0.022255497385141});
  FELookupTable.push_back({0.000262000000000,0.023067993604724});
  FELookupTable.push_back({0.000280000000000,0.023853450371938});
  FELookupTable.push_back({0.000298000000000,0.024614426189665});
  FELookupTable.push_back({0.000316000000000,0.025353126115250});
  FELookupTable.push_back({0.000334000000000,0.026071418848936});
  FELookupTable.push_back({0.000352000000000,0.026770922975814});
  FELookupTable.push_back({0.000370000000000,0.027453090338727});
  FELookupTable.push_back({0.000388000000000,0.028119143277171});
  FELookupTable.push_back({0.000406000000000,0.028770209205115});
  FELookupTable.push_back({0.000424000000000,0.029407274486059});
  FELookupTable.push_back({0.000442000000000,0.030031212133977});
  FELookupTable.push_back({0.000460000000000,0.030642825607186});
  FELookupTable.push_back({0.000478000000000,0.031242821909557});
  FELookupTable.push_back({0.000496000000000,0.031831860704983});
  FELookupTable.push_back({0.000514000000000,0.032410533412714});
  FELookupTable.push_back({0.000532000000000,0.032979370398516});
  FELookupTable.push_back({0.000550000000000,0.033538876157691});
  FELookupTable.push_back({0.000568000000000,0.034089505236176});
  FELookupTable.push_back({0.000586000000000,0.034631676488132});
  FELookupTable.push_back({0.000604000000000,0.035165776882552});
  FELookupTable.push_back({0.000622000000000,0.035692154985948});
  FELookupTable.push_back({0.000640000000000,0.036211153081206});
  FELookupTable.push_back({0.000658000000000,0.036723080461930});
  FELookupTable.push_back({0.000676000000000,0.037228225433197});
  FELookupTable.push_back({0.000694000000000,0.037726857253707});
  FELookupTable.push_back({0.000712000000000,0.038219218206915});
  FELookupTable.push_back({0.000730000000000,0.038705563521542});
  FELookupTable.push_back({0.000748000000000,0.039186095663530});
  FELookupTable.push_back({0.000766000000000,0.039661042183844});
  FELookupTable.push_back({0.000784000000000,0.040130579963967});
  FELookupTable.push_back({0.000802000000000,0.040594903663170});
  FELookupTable.push_back({0.000820000000000,0.041054187930051});
  FELookupTable.push_back({0.000838000000000,0.041508597889430});
  FELookupTable.push_back({0.000856000000000,0.041958280176619});
  FELookupTable.push_back({0.000874000000000,0.042403402171756});
  FELookupTable.push_back({0.000892000000000,0.042844094848027});
  FELookupTable.push_back({0.000910000000000,0.043280481990953});
  FELookupTable.push_back({0.000928000000000,0.043712709797191});
  FELookupTable.push_back({0.000946000000000,0.044140879774873});
  FELookupTable.push_back({0.000964000000000,0.044565116687794});
  FELookupTable.push_back({0.000982000000000,0.044985539738429});
  FELookupTable.push_back({0.001000000000000,0.045402234500422});
  FELookupTable.push_back({0.001180000000000,0.049384663658195});
  FELookupTable.push_back({0.001360000000000,0.053082748255324});
  FELookupTable.push_back({0.001540000000000,0.056551479758254});
  FELookupTable.push_back({0.001720000000000,0.059830139757313});
  FELookupTable.push_back({0.001900000000000,0.062947942778981});
  FELookupTable.push_back({0.002080000000000,0.065927297472632});
  FELookupTable.push_back({0.002260000000000,0.068785866537238});
  FELookupTable.push_back({0.002440000000000,0.071537855005695});
  FELookupTable.push_back({0.002620000000000,0.074194871719602});
  FELookupTable.push_back({0.002800000000000,0.076766568218678});
  FELookupTable.push_back({0.002980000000000,0.079261075410929});
  FELookupTable.push_back({0.003160000000000,0.081685304434841});
  FELookupTable.push_back({0.003340000000000,0.084045184912829});
  FELookupTable.push_back({0.003520000000000,0.086345874398929});
  FELookupTable.push_back({0.003700000000000,0.088591860887988});
  FELookupTable.push_back({0.003880000000000,0.090787119061703});
  FELookupTable.push_back({0.004060000000000,0.092935132322190});
  FELookupTable.push_back({0.004240000000000,0.095039027563743});
  FELookupTable.push_back({0.004420000000000,0.097101585349993});
  FELookupTable.push_back({0.004600000000000,0.099125332116835});
  FELookupTable.push_back({0.004780000000000,0.101112514853652});
  FELookupTable.push_back({0.004960000000000,0.103065204888598});
  FELookupTable.push_back({0.005140000000000,0.104985252976771});
  FELookupTable.push_back({0.005320000000000,0.106874374456628});
  FELookupTable.push_back({0.005500000000000,0.108734132322773});
  FELookupTable.push_back({0.005680000000000,0.110565962617321});
  FELookupTable.push_back({0.005860000000000,0.112371188409773});
  FELookupTable.push_back({0.006040000000000,0.114151031858947});
  FELookupTable.push_back({0.006220000000000,0.115906615597299});
  FELookupTable.push_back({0.006400000000000,0.117639007745262});
  FELookupTable.push_back({0.006580000000000,0.119349176474118});
  FELookupTable.push_back({0.006760000000000,0.121038022960561});
  FELookupTable.push_back({0.006940000000000,0.122706415637142});
  FELookupTable.push_back({0.007120000000000,0.124355131574755});
  FELookupTable.push_back({0.007300000000000,0.125984925428172});
  FELookupTable.push_back({0.007480000000000,0.127596505608997});
  FELookupTable.push_back({0.007660000000000,0.129190511891657});
  FELookupTable.push_back({0.007840000000000,0.130767572693256});
  FELookupTable.push_back({0.008020000000000,0.132328271900117});
  FELookupTable.push_back({0.008200000000000,0.133873160789623});
  FELookupTable.push_back({0.008380000000000,0.135402760522842});
  FELookupTable.push_back({0.008560000000000,0.136917564397515});
  FELookupTable.push_back({0.008740000000000,0.138418048659811});
  FELookupTable.push_back({0.008920000000000,0.139904639254940});
  FELookupTable.push_back({0.009100000000000,0.141377757460002});
  FELookupTable.push_back({0.009280000000000,0.142837821233621});
  FELookupTable.push_back({0.009460000000000,0.144285202950585});
  FELookupTable.push_back({0.009640000000000,0.145720265675178});
  FELookupTable.push_back({0.009820000000000,0.147143355584708});
  FELookupTable.push_back({0.010000000000000,0.148554803048697});
  FELookupTable.push_back({0.010900000000000,0.155447969400893});
  FELookupTable.push_back({0.011800000000000,0.162092065379043});
  FELookupTable.push_back({0.012700000000000,0.168515378644931});
  FELookupTable.push_back({0.013600000000000,0.174741224502827});
  FELookupTable.push_back({0.014500000000000,0.180789124999172});
  FELookupTable.push_back({0.015400000000000,0.186675619199191});
  FELookupTable.push_back({0.016300000000000,0.192414857395191});
  FELookupTable.push_back({0.017200000000000,0.198019034458568});
  FELookupTable.push_back({0.018100000000000,0.203498788849615});
  FELookupTable.push_back({0.019000000000000,0.208863433368336});
  FELookupTable.push_back({0.019900000000000,0.214121211931299});
  FELookupTable.push_back({0.020800000000000,0.219279421579911});
  FELookupTable.push_back({0.021700000000000,0.224344574638110});
  FELookupTable.push_back({0.022600000000000,0.229322530084391});
  FELookupTable.push_back({0.023500000000000,0.234218567532155});
  FELookupTable.push_back({0.024400000000000,0.239037441258646});
  FELookupTable.push_back({0.025300000000000,0.243783493079922});
  FELookupTable.push_back({0.026200000000000,0.248460673401891});
  FELookupTable.push_back({0.027100000000000,0.253072595369255});
  FELookupTable.push_back({0.028000000000000,0.257622573814752});
  FELookupTable.push_back({0.028900000000000,0.262113658612548});
  FELookupTable.push_back({0.029800000000000,0.266548663387870});
  FELookupTable.push_back({0.030700000000000,0.270930190349265});
  FELookupTable.push_back({0.031600000000000,0.275260651864847});
  FELookupTable.push_back({0.032500000000000,0.279542289289513});
  FELookupTable.push_back({0.033400000000000,0.283777181322771});
  FELookupTable.push_back({0.034300000000000,0.287967290547690});
  FELookupTable.push_back({0.035200000000000,0.292114428841657});
  FELookupTable.push_back({0.036100000000000,0.296220292188143});
  FELookupTable.push_back({0.037000000000000,0.300286493309521});
  FELookupTable.push_back({0.037900000000000,0.304314526095217});
  FELookupTable.push_back({0.038800000000000,0.308305795019668});
  FELookupTable.push_back({0.039700000000000,0.312261645423442});
  FELookupTable.push_back({0.040600000000000,0.316183325678133});
  FELookupTable.push_back({0.041500000000000,0.320072013628261});
  FELookupTable.push_back({0.042400000000000,0.323928846656665});
  FELookupTable.push_back({0.043300000000000,0.327754872024018});
  FELookupTable.push_back({0.044200000000000,0.331551112144095});
  FELookupTable.push_back({0.045100000000000,0.335318508462155});
  FELookupTable.push_back({0.046000000000000,0.339057984389807});
  FELookupTable.push_back({0.046900000000000,0.342770389591080});
  FELookupTable.push_back({0.047800000000000,0.346456561757158});
  FELookupTable.push_back({0.048700000000000,0.350117270443849});
  FELookupTable.push_back({0.049600000000000,0.353753278763338});
  FELookupTable.push_back({0.050500000000000,0.357365285928617});
  FELookupTable.push_back({0.051400000000000,0.360953982535310});
  FELookupTable.push_back({0.052300000000000,0.364520027744576});
  FELookupTable.push_back({0.053200000000000,0.368064032539988});
  FELookupTable.push_back({0.054100000000000,0.371586609463571});
  FELookupTable.push_back({0.055000000000000,0.375088317513879});
  FELookupTable.push_back({0.055900000000000,0.378569714559546});
  FELookupTable.push_back({0.056800000000000,0.382031335151163});
  FELookupTable.push_back({0.057700000000000,0.385473672646128});
  FELookupTable.push_back({0.058600000000000,0.388897228989390});
  FELookupTable.push_back({0.059500000000000,0.392302457871923});
  FELookupTable.push_back({0.060400000000000,0.395689818406066});
  FELookupTable.push_back({0.061300000000000,0.399059752006587});
  FELookupTable.push_back({0.062200000000000,0.402412662200413});
  FELookupTable.push_back({0.063100000000000,0.405748960251093});
  FELookupTable.push_back({0.064000000000000,0.409069035167179});
  FELookupTable.push_back({0.064900000000000,0.412373268769691});
  FELookupTable.push_back({0.065800000000000,0.415662009941678});
  FELookupTable.push_back({0.066700000000000,0.418935615907786});
  FELookupTable.push_back({0.067600000000000,0.422194431636616});
  FELookupTable.push_back({0.068500000000000,0.425438770214832});
  FELookupTable.push_back({0.069400000000000,0.428668955411297});
  FELookupTable.push_back({0.070300000000000,0.431885293387654});
  FELookupTable.push_back({0.071200000000000,0.435088086936541});
  FELookupTable.push_back({0.072100000000000,0.438277609775732});
  FELookupTable.push_back({0.073000000000000,0.441454147112114});
  FELookupTable.push_back({0.073900000000000,0.444617975467668});
  FELookupTable.push_back({0.074800000000000,0.447769341909193});
  FELookupTable.push_back({0.075700000000000,0.450908507647910});
  FELookupTable.push_back({0.076600000000000,0.454035718825978});
  FELookupTable.push_back({0.077500000000000,0.457151214398647});
  FELookupTable.push_back({0.078400000000000,0.460255232739170});
  FELookupTable.push_back({0.079300000000000,0.463347986124008});
  FELookupTable.push_back({0.080200000000000,0.466429700546347});
  FELookupTable.push_back({0.081100000000000,0.469500588987421});
  FELookupTable.push_back({0.082000000000000,0.472560865068129});
  FELookupTable.push_back({0.082900000000000,0.475610716715000});
  FELookupTable.push_back({0.083800000000000,0.478650347066594});
  FELookupTable.push_back({0.084700000000000,0.481679946946986});
  FELookupTable.push_back({0.085600000000000,0.484699702154075});
  FELookupTable.push_back({0.086500000000000,0.487709799958237});
  FELookupTable.push_back({0.087400000000000,0.490710403526659});
  FELookupTable.push_back({0.088300000000000,0.493701691510595});
  FELookupTable.push_back({0.089200000000000,0.496683831369203});
  FELookupTable.push_back({0.090100000000000,0.499656986380743});
  FELookupTable.push_back({0.091000000000000,0.502621322092753});
  FELookupTable.push_back({0.091900000000000,0.505576980769860});
  FELookupTable.push_back({0.092800000000000,0.508524120820832});
  FELookupTable.push_back({0.093700000000000,0.511462890199759});
  FELookupTable.push_back({0.094600000000000,0.514393433351326});
  FELookupTable.push_back({0.095500000000000,0.517315897794701});
  FELookupTable.push_back({0.096400000000000,0.520230407898995});
  FELookupTable.push_back({0.097300000000000,0.523137105237473});
  FELookupTable.push_back({0.098200000000000,0.526036121338796});
  FELookupTable.push_back({0.099100000000000,0.528927584761664});
  FELookupTable.push_back({0.100000000000000,0.531811621189636});
  FELookupTable.push_back({0.102800000000000,0.540738011937291});
  FELookupTable.push_back({0.105600000000000,0.549597220092945});
  FELookupTable.push_back({0.108400000000000,0.558392567483119});
  FELookupTable.push_back({0.111200000000000,0.567127142950630});
  FELookupTable.push_back({0.114000000000000,0.575803869215559});
  FELookupTable.push_back({0.116800000000000,0.584425470435388});
  FELookupTable.push_back({0.119600000000000,0.592994536546642});
  FELookupTable.push_back({0.122400000000000,0.601513485488268});
  FELookupTable.push_back({0.125200000000000,0.609984620976205});
  FELookupTable.push_back({0.128000000000000,0.618410121041835});
  FELookupTable.push_back({0.130800000000000,0.626792032380388});
  FELookupTable.push_back({0.133600000000000,0.635132320258263});
  FELookupTable.push_back({0.136400000000000,0.643432826433765});
  FELookupTable.push_back({0.139200000000000,0.651695322309641});
  FELookupTable.push_back({0.142000000000000,0.659921493659345});
  FELookupTable.push_back({0.144800000000000,0.668112929281872});
  FELookupTable.push_back({0.147600000000000,0.676271164671418});
  FELookupTable.push_back({0.150400000000000,0.684397666180104});
  FELookupTable.push_back({0.153200000000000,0.692493817900434});
  FELookupTable.push_back({0.156000000000000,0.700560964243927});
  FELookupTable.push_back({0.158800000000000,0.708600387005291});
  FELookupTable.push_back({0.161600000000000,0.716613321128516});
  FELookupTable.push_back({0.164400000000000,0.724600936125766});
  FELookupTable.push_back({0.167200000000000,0.732564373063674});
  FELookupTable.push_back({0.170000000000000,0.740504729380832});
  FELookupTable.push_back({0.172800000000000,0.748423044124802});
  FELookupTable.push_back({0.175600000000000,0.756320336902432});
  FELookupTable.push_back({0.178400000000000,0.764197584712057});
  FELookupTable.push_back({0.181200000000000,0.772055736008727});
  FELookupTable.push_back({0.184000000000000,0.779895690268172});
  FELookupTable.push_back({0.186800000000000,0.787718334524911});
  FELookupTable.push_back({0.189600000000000,0.795524520944088});
  FELookupTable.push_back({0.192400000000000,0.803315079932631});
  FELookupTable.push_back({0.195200000000000,0.811090799716463});
  FELookupTable.push_back({0.198000000000000,0.818852461710327});
  FELookupTable.push_back({0.200800000000000,0.826600818232487});
  FELookupTable.push_back({0.203600000000000,0.834336605109698});
  FELookupTable.push_back({0.206400000000000,0.842060520947488});
  FELookupTable.push_back({0.209200000000000,0.849773262165941});
  FELookupTable.push_back({0.212000000000000,0.857475500452802});
  FELookupTable.push_back({0.214800000000000,0.865167895136139});
  FELookupTable.push_back({0.217600000000000,0.872851072052603});
  FELookupTable.push_back({0.220400000000000,0.880525658643694});
  FELookupTable.push_back({0.223200000000000,0.888192260982736});
  FELookupTable.push_back({0.226000000000000,0.895851470706157});
  FELookupTable.push_back({0.228800000000000,0.903503870175832});
  FELookupTable.push_back({0.231600000000000,0.911150014579608});
  FELookupTable.push_back({0.234400000000000,0.918790461562993});
  FELookupTable.push_back({0.237200000000000,0.926425756630077});
  FELookupTable.push_back({0.240000000000000,0.934056418150174});
  FELookupTable.push_back({0.242800000000000,0.941682970595495});
  FELookupTable.push_back({0.245600000000000,0.949305922197520});
  FELookupTable.push_back({0.248400000000000,0.956925775487788});
  FELookupTable.push_back({0.251200000000000,0.964543010574622});
  FELookupTable.push_back({0.254000000000000,0.972158117345784});
  FELookupTable.push_back({0.256800000000000,0.979771557474244});
  FELookupTable.push_back({0.259600000000000,0.987383804233161});
  FELookupTable.push_back({0.262400000000000,0.994995312370142});
  FELookupTable.push_back({0.265200000000000,1.002606505670538});
  FELookupTable.push_back({0.268000000000000,1.010217869616988});
  FELookupTable.push_back({0.270800000000000,1.017829819883844});
  FELookupTable.push_back({0.273600000000000,1.025442780735452});
  FELookupTable.push_back({0.276400000000000,1.033057185503035});
  FELookupTable.push_back({0.279200000000000,1.040673440931916});
  FELookupTable.push_back({0.282000000000000,1.048291963860699});
  FELookupTable.push_back({0.284800000000000,1.055913161236416});
  FELookupTable.push_back({0.287600000000000,1.063537435145030});
  FELookupTable.push_back({0.290400000000000,1.071165183062684});
  FELookupTable.push_back({0.293200000000000,1.078796798097689});
  FELookupTable.push_back({0.296000000000000,1.086432669223762});
  FELookupTable.push_back({0.298800000000000,1.094073181505040});
  FELookupTable.push_back({0.301600000000000,1.101718716313282});
  FELookupTable.push_back({0.304400000000000,1.109369651537768});
  FELookupTable.push_back({0.307200000000000,1.117026361788235});
  FELookupTable.push_back({0.310000000000000,1.124689218591303});
  FELookupTable.push_back({0.312800000000000,1.132358590580720});
  FELookupTable.push_back({0.315600000000000,1.140034843681794});
  FELookupTable.push_back({0.318400000000000,1.147718341290332});
  FELookupTable.push_back({0.321200000000000,1.155409444446406});
  FELookupTable.push_back({0.324000000000000,1.163108512003242});
  FELookupTable.push_back({0.326800000000000,1.170815900791501});
  FELookupTable.push_back({0.329600000000000,1.178531965779239});
  FELookupTable.push_back({0.332400000000000,1.186257060227777});
  FELookupTable.push_back({0.335200000000000,1.193991535843743});
  FELookupTable.push_back({0.338000000000000,1.201735742927498});
  FELookupTable.push_back({0.340800000000000,1.209490030518179});
  FELookupTable.push_back({0.343600000000001,1.217254746535557});
  FELookupTable.push_back({0.346400000000001,1.225030237918913});
  FELookupTable.push_back({0.349200000000001,1.232816850763128});
  FELookupTable.push_back({0.352000000000001,1.240614930452155});
  FELookupTable.push_back({0.354800000000001,1.248424821790071});
  FELookupTable.push_back({0.357600000000001,1.256246869129843});
  FELookupTable.push_back({0.360400000000001,1.264081416500009});
  FELookupTable.push_back({0.363200000000001,1.271928807729390});
  FELookupTable.push_back({0.366000000000001,1.279789386570011});
  FELookupTable.push_back({0.368800000000001,1.287663496818358});
  FELookupTable.push_back({0.371600000000001,1.295551482435119});
  FELookupTable.push_back({0.374400000000001,1.303453687663527});
  FELookupTable.push_back({0.377200000000001,1.311370457146465});
  FELookupTable.push_back({0.380000000000001,1.319302136042419});
  FELookupTable.push_back({0.382800000000001,1.327249065918475});
  FELookupTable.push_back({0.385600000000001,1.335211601927673});
  FELookupTable.push_back({0.388400000000001,1.343190087058649});
  FELookupTable.push_back({0.391200000000001,1.351184869673516});
  FELookupTable.push_back({0.394000000000001,1.359196299217011});
  FELookupTable.push_back({0.396800000000001,1.367224726328113});
  FELookupTable.push_back({0.399600000000001,1.375270502951323});
  FELookupTable.push_back({0.402400000000001,1.383333982447708});
  FELookupTable.push_back({0.405200000000001,1.391415519705807});
  FELookupTable.push_back({0.408000000000001,1.399515471252500});
  FELookupTable.push_back({0.410800000000001,1.407634195363950});
  FELookupTable.push_back({0.413600000000001,1.415772052176691});
  FELookupTable.push_back({0.416400000000001,1.423929403798988});
  FELookupTable.push_back({0.419200000000001,1.432106614422538});
  FELookupTable.push_back({0.422000000000001,1.440304050434631});
  FELookupTable.push_back({0.424800000000001,1.448522080530844});
  FELookupTable.push_back({0.427600000000001,1.456761075828383});
  FELookupTable.push_back({0.430400000000001,1.465021409980143});
  FELookupTable.push_back({0.433200000000001,1.473303459289616});
  FELookupTable.push_back({0.436000000000001,1.481607602826694});
  FELookupTable.push_back({0.438800000000001,1.489934222544511});
  FELookupTable.push_back({0.441600000000001,1.498283703397382});
  FELookupTable.push_back({0.444400000000001,1.506656429622251});
  FELookupTable.push_back({0.447200000000001,1.515052800381977});
  FELookupTable.push_back({0.450000000000001,1.523473206337962});
  FELookupTable.push_back({0.452800000000001,1.531918045654524});
  FELookupTable.push_back({0.455600000000002,1.540387720106948});
  FELookupTable.push_back({0.458400000000002,1.548882635208141});
  FELookupTable.push_back({0.461200000000002,1.557403200337107});
  FELookupTable.push_back({0.464000000000002,1.565949828869323});
  FELookupTable.push_back({0.466800000000002,1.574522938309143});
  FELookupTable.push_back({0.469600000000002,1.583122950424317});
  FELookupTable.push_back({0.472400000000002,1.591750291382760});
  FELookupTable.push_back({0.475200000000002,1.600405391891666});
  FELookupTable.push_back({0.478000000000002,1.609088687339093});
  FELookupTable.push_back({0.480800000000002,1.617800617938136});
  FELookupTable.push_back({0.483600000000002,1.626541628873806});
  FELookupTable.push_back({0.486400000000002,1.635312170452746});
  FELookupTable.push_back({0.489200000000002,1.644112698255912});
  FELookupTable.push_back({0.492000000000002,1.652943673294346});
  FELookupTable.push_back({0.494800000000002,1.661805562168181});
  FELookupTable.push_back({0.497600000000002,1.670698837229016});
  FELookupTable.push_back({0.500400000000002,1.679623976745813});
  FELookupTable.push_back({0.503200000000002,1.688581465074448});
  FELookupTable.push_back({0.506000000000002,1.697571789217177});
  FELookupTable.push_back({0.508800000000002,1.706595453619713});
  FELookupTable.push_back({0.511600000000002,1.715652958170070});
  FELookupTable.push_back({0.514400000000002,1.724744813346377});
  FELookupTable.push_back({0.517200000000002,1.733871536621967});
  FELookupTable.push_back({0.520000000000002,1.743033652660326});
  FELookupTable.push_back({0.522800000000002,1.752231693514894});
  FELookupTable.push_back({0.525600000000002,1.761466198833916});
  FELookupTable.push_back({0.528400000000002,1.770737716070541});
  FELookupTable.push_back({0.531200000000002,1.780046800698388});
  FELookupTable.push_back({0.534000000000002,1.789394016432776});
  FELookupTable.push_back({0.536800000000002,1.798779935457867});
  FELookupTable.push_back({0.539600000000002,1.808205138659941});
  FELookupTable.push_back({0.542400000000002,1.817670215867059});
  FELookupTable.push_back({0.545200000000002,1.827175766095350});
  FELookupTable.push_back({0.548000000000002,1.836722397802207});
  FELookupTable.push_back({0.550800000000002,1.846310729146650});
  FELookupTable.push_back({0.553600000000002,1.855941388257149});
  FELookupTable.push_back({0.556400000000002,1.865615013507213});
  FELookupTable.push_back({0.559200000000002,1.875332253799031});
  FELookupTable.push_back({0.562000000000002,1.885093768855518});
  FELookupTable.push_back({0.564800000000002,1.894900229521089});
  FELookupTable.push_back({0.567600000000002,1.904752318071509});
  FELookupTable.push_back({0.570400000000002,1.914650728533194});
  FELookupTable.push_back({0.573200000000002,1.924596163694060});
  FELookupTable.push_back({0.576000000000003,1.934589348867954});
  FELookupTable.push_back({0.578800000000003,1.944631011872799});
  FELookupTable.push_back({0.581600000000003,1.954721897133728});
  FELookupTable.push_back({0.584400000000003,1.964862762578844});
  FELookupTable.push_back({0.587200000000003,1.975054380023934});
  FELookupTable.push_back({0.590000000000003,1.985297535569695});
  FELookupTable.push_back({0.592800000000003,1.995593030012041});
  FELookupTable.push_back({0.595600000000003,2.005941679265998});
  FELookupTable.push_back({0.598400000000003,2.016344314803805});
  FELookupTable.push_back({0.601200000000003,2.026801784107793});
  FELookupTable.push_back({0.604000000000003,2.037314951138693});
  FELookupTable.push_back({0.606800000000003,2.047884696820035});
  FELookupTable.push_back({0.609600000000003,2.058511919539336});
  FELookupTable.push_back({0.612400000000003,2.069197535666803});
  FELookupTable.push_back({0.615200000000003,2.079942480092334});
  FELookupTable.push_back({0.618000000000003,2.090747706781606});
  FELookupTable.push_back({0.620800000000003,2.101614189352122});
  FELookupTable.push_back({0.623600000000003,2.112542921670086});
  FELookupTable.push_back({0.626400000000003,2.123534918469064});
  FELookupTable.push_back({0.629200000000003,2.134591215991415});
  FELookupTable.push_back({0.632000000000003,2.145712872653518});
  FELookupTable.push_back({0.634800000000003,2.156900969735909});
  FELookupTable.push_back({0.637600000000003,2.168156612099473});
  FELookupTable.push_back({0.640400000000003,2.179480928928907});
  FELookupTable.push_back({0.643200000000003,2.190875071388643});
  FELookupTable.push_back({0.646000000000003,2.202340226034567});
  FELookupTable.push_back({0.648800000000003,2.213877596508208});
  FELookupTable.push_back({0.651600000000003,2.225488417316178});
  FELookupTable.push_back({0.654400000000003,2.237173951462694});
  FELookupTable.push_back({0.657200000000003,2.248935491386207});
  FELookupTable.push_back({0.660000000000003,2.260774359933925});
  FELookupTable.push_back({0.662800000000003,2.272691911376091});
  FELookupTable.push_back({0.665600000000003,2.284689532462021});
  FELookupTable.push_back({0.668400000000003,2.296768643519997});
  FELookupTable.push_back({0.671200000000003,2.308930699603247});
  FELookupTable.push_back({0.674000000000003,2.321177191684376});
  FELookupTable.push_back({0.676800000000003,2.333509647900739});
  FELookupTable.push_back({0.679600000000003,2.345929634853433});
  FELookupTable.push_back({0.682400000000003,2.358438758962702});
  FELookupTable.push_back({0.685200000000003,2.371038667882765});
  FELookupTable.push_back({0.688000000000003,2.383731051979230});
  FELookupTable.push_back({0.690800000000004,2.396517645872487});
  FELookupTable.push_back({0.693600000000004,2.409400230050649});
  FELookupTable.push_back({0.696400000000004,2.422380632555889});
  FELookupTable.push_back({0.699200000000004,2.435460730748223});
  FELookupTable.push_back({0.702000000000004,2.448642453151071});
  FELookupTable.push_back({0.704800000000004,2.461927781383231});
  FELookupTable.push_back({0.707600000000004,2.475318752182177});
  FELookupTable.push_back({0.710400000000004,2.488817459523933});
  FELookupTable.push_back({0.713200000000004,2.502426056845156});
  FELookupTable.push_back({0.716000000000004,2.516146759373404});
  FELookupTable.push_back({0.718800000000004,2.529981843778185});
  FELookupTable.push_back({0.721600000000004,2.543933662050150});
  FELookupTable.push_back({0.724400000000004,2.558004627014521});
  FELookupTable.push_back({0.727200000000004,2.572197226763226});
  FELookupTable.push_back({0.730000000000004,2.586514024694106});
  FELookupTable.push_back({0.732800000000004,2.600957662641940});
  FELookupTable.push_back({0.735600000000004,2.615530864173321});
  FELookupTable.push_back({0.738400000000004,2.630236438055799});
  FELookupTable.push_back({0.741200000000004,2.645077281912515});
  FELookupTable.push_back({0.744000000000004,2.660056386074370});
  FELookupTable.push_back({0.746800000000004,2.675176837642737});
  FELookupTable.push_back({0.749600000000004,2.690441824776689});
  FELookupTable.push_back({0.752400000000004,2.705854641219859});
  FELookupTable.push_back({0.755200000000004,2.721418691083197});
  FELookupTable.push_back({0.758000000000004,2.737137493901236});
  FELookupTable.push_back({0.760800000000004,2.753014689980897});
  FELookupTable.push_back({0.763600000000004,2.769054046063404});
  FELookupTable.push_back({0.766400000000004,2.785259461321625});
  FELookupTable.push_back({0.769200000000004,2.801634973717015});
  FELookupTable.push_back({0.772000000000004,2.818184766742380});
  FELookupTable.push_back({0.774800000000004,2.834913176578986});
  FELookupTable.push_back({0.777600000000004,2.851824699698970});
  FELookupTable.push_back({0.780400000000004,2.868924000946798});
  FELookupTable.push_back({0.783200000000004,2.886215922136507});
  FELookupTable.push_back({0.786000000000004,2.903705491204802});
  FELookupTable.push_back({0.788800000000004,2.921397931963777});
  FELookupTable.push_back({0.791600000000004,2.939298674501086});
  FELookupTable.push_back({0.794400000000004,2.957413363776814});
  FELookupTable.push_back({0.797200000000004,2.975747881630129});
  FELookupTable.push_back({0.800000000000004,2.994308344020226});
  FELookupTable.push_back({0.803000000000004,3.014452530105148});
  FELookupTable.push_back({0.806000000000004,3.034871596805591});
  FELookupTable.push_back({0.809000000000004,3.055574106535735});
  FELookupTable.push_back({0.812000000000004,3.076569023416730});
  FELookupTable.push_back({0.815000000000004,3.097865738976838});
  FELookupTable.push_back({0.818000000000005,3.119474099942274});
  FELookupTable.push_back({0.821000000000005,3.141404438326491});
  FELookupTable.push_back({0.824000000000005,3.163667604050154});
  FELookupTable.push_back({0.827000000000005,3.186275000351878});
  FELookupTable.push_back({0.830000000000005,3.209238622281618});
  FELookupTable.push_back({0.833000000000005,3.232571098604804});
  FELookupTable.push_back({0.836000000000005,3.256285737486880});
  FELookupTable.push_back({0.839000000000005,3.280396576375495});
  FELookupTable.push_back({0.842000000000005,3.304918436552423});
  FELookupTable.push_back({0.845000000000005,3.329866982890376});
  FELookupTable.push_back({0.848000000000005,3.355258789422983});
  FELookupTable.push_back({0.851000000000005,3.381111411420738});
  FELookupTable.push_back({0.854000000000005,3.407443464764178});
  FELookupTable.push_back({0.857000000000005,3.434274713520150});
  FELookupTable.push_back({0.860000000000005,3.461626166761135});
  FELookupTable.push_back({0.863000000000005,3.489520185824859});
  FELookupTable.push_back({0.866000000000005,3.517980601192521});
  FELookupTable.push_back({0.869000000000005,3.547032853966496});
  FELookupTable.push_back({0.872000000000005,3.576704129956434});
  FELookupTable.push_back({0.875000000000005,3.607023534221850});
  FELookupTable.push_back({0.878000000000005,3.638022273926759});
  FELookupTable.push_back({0.881000000000005,3.669733866525663});
  FELookupTable.push_back({0.884000000000005,3.702194374417402});
  FELookupTable.push_back({0.887000000000005,3.735442670214681});
  FELookupTable.push_back({0.890000000000005,3.769520737556404});
  FELookupTable.push_back({0.893000000000005,3.804474013341240});
  FELookupTable.push_back({0.896000000000005,3.840351778428173});
  FELookupTable.push_back({0.899000000000005,3.877207605289900});
  FELookupTable.push_back({0.902000000000005,3.915099872891815});
  FELookupTable.push_back({0.905000000000005,3.954092361299754});
  FELookupTable.push_back({0.908000000000005,3.994254941321652});
  FELookupTable.push_back({0.911000000000005,4.035664378032093});
  FELookupTable.push_back({0.914000000000005,4.078405271542885});
  FELookupTable.push_back({0.917000000000005,4.122571164177219});
  FELookupTable.push_back({0.920000000000005,4.168265850703007});
  FELookupTable.push_back({0.923000000000005,4.215604938068259});
  FELookupTable.push_back({0.926000000000005,4.264717713975575});
  FELookupTable.push_back({0.929000000000005,4.315749399025590});
  FELookupTable.push_back({0.932000000000005,4.368863892765487});
  FELookupTable.push_back({0.935000000000005,4.424247117228939});
  FELookupTable.push_back({0.938000000000005,4.482111169317597});
  FELookupTable.push_back({0.941000000000005,4.542699488287903});
  FELookupTable.push_back({0.944000000000005,4.606293370070990});
  FELookupTable.push_back({0.947000000000005,4.673220269913461});
  FELookupTable.push_back({0.950000000000005,4.743864517466934});
  FELookupTable.push_back({0.950800000000005,4.763386972744175});
  FELookupTable.push_back({0.951600000000005,4.783215267168965});
  FELookupTable.push_back({0.952400000000005,4.803359489207994});
  FELookupTable.push_back({0.953200000000005,4.823830237006129});
  FELookupTable.push_back({0.954000000000005,4.844638653383545});
  FELookupTable.push_back({0.954800000000005,4.865796463892845});
  FELookupTable.push_back({0.955600000000005,4.887316018263228});
  FELookupTable.push_back({0.956400000000005,4.909210335600276});
  FELookupTable.push_back({0.957200000000005,4.931493153757606});
  FELookupTable.push_back({0.958000000000005,4.954178983351508});
  FELookupTable.push_back({0.958800000000005,4.977283166952989});
  FELookupTable.push_back({0.959600000000005,5.000821944064849});
  FELookupTable.push_back({0.960400000000005,5.024812522576301});
  FELookupTable.push_back({0.961200000000005,5.049273157486420});
  FELookupTable.push_back({0.962000000000005,5.074223237802836});
  FELookupTable.push_back({0.962800000000005,5.099683382656883});
  FELookupTable.push_back({0.963600000000005,5.125675547834510});
  FELookupTable.push_back({0.964400000000005,5.152223144108508});
  FELookupTable.push_back({0.965200000000005,5.179351168977640});
  FELookupTable.push_back({0.966000000000005,5.207086353679111});
  FELookupTable.push_back({0.966800000000005,5.235457327651391});
  FELookupTable.push_back({0.967600000000005,5.264494802995409});
  FELookupTable.push_back({0.968400000000005,5.294231781927259});
  FELookupTable.push_back({0.969200000000005,5.324703790751866});
  FELookupTable.push_back({0.970000000000005,5.355949144536161});
  FELookupTable.push_back({0.970800000000005,5.388009245925383});
  FELookupTable.push_back({0.971600000000005,5.420928933255669});
  FELookupTable.push_back({0.972400000000005,5.454756861834030});
  FELookupTable.push_back({0.973200000000005,5.489545958219810});
  FELookupTable.push_back({0.974000000000005,5.525353934265970});
  FELookupTable.push_back({0.974800000000005,5.562243883123227});
  FELookupTable.push_back({0.975600000000005,5.600284971128401});
  FELookupTable.push_back({0.976400000000005,5.639553244718345});
  FELookupTable.push_back({0.977200000000005,5.680132576124993});
  FELookupTable.push_back({0.978000000000005,5.722115777538400});
  FELookupTable.push_back({0.978800000000005,5.765605921111898});
  FELookupTable.push_back({0.979600000000005,5.810717912234290});
  FELookupTable.push_back({0.980400000000005,5.857580376758735});
  FELookupTable.push_back({0.981200000000006,5.906337940561654});
  FELookupTable.push_back({0.982000000000006,5.957154003636397});
  FELookupTable.push_back({0.982800000000006,6.010214143420224});
  FELookupTable.push_back({0.983600000000006,6.065730326922258});
  FELookupTable.push_back({0.984400000000006,6.123946174034261});
  FELookupTable.push_back({0.985200000000006,6.185143603668966});
  FELookupTable.push_back({0.986000000000006,6.249651323314255});
  FELookupTable.push_back({0.986800000000006,6.317855812239787});
  FELookupTable.push_back({0.987600000000006,6.390215733128865});
  FELookupTable.push_back({0.988400000000006,6.467281143344018});
  FELookupTable.push_back({0.989200000000006,6.549719563192257});
  FELookupTable.push_back({0.990000000000006,6.638352067704933});
  FELookupTable.push_back({0.990100000000006,6.649915067020986});
  FELookupTable.push_back({0.990200000000006,6.661592791415023});
  FELookupTable.push_back({0.990300000000006,6.673387576939785});
  FELookupTable.push_back({0.990400000000006,6.685301831958017});
  FELookupTable.push_back({0.990500000000006,6.697338040162142});
  FELookupTable.push_back({0.990600000000006,6.709498763753338});
  FELookupTable.push_back({0.990700000000006,6.721786646790241});
  FELookupTable.push_back({0.990800000000006,6.734204418718260});
  FELookupTable.push_back({0.990900000000006,6.746754898091321});
  FELookupTable.push_back({0.991000000000006,6.759440996498768});
  FELookupTable.push_back({0.991100000000006,6.772265722711175});
  FELookupTable.push_back({0.991200000000006,6.785232187059856});
  FELookupTable.push_back({0.991300000000006,6.798343606066084});
  FELookupTable.push_back({0.991400000000006,6.811603307337313});
  FELookupTable.push_back({0.991500000000006,6.825014734749097});
  FELookupTable.push_back({0.991600000000006,6.838581453932969});
  FELookupTable.push_back({0.991700000000006,6.852307158092220});
  FELookupTable.push_back({0.991800000000006,6.866195674169381});
  FELookupTable.push_back({0.991900000000006,6.880250969391268});
  FELookupTable.push_back({0.992000000000006,6.894477158219665});
  FELookupTable.push_back({0.992100000000006,6.908878509738237});
  FELookupTable.push_back({0.992200000000006,6.923459455508921});
  FELookupTable.push_back({0.992300000000006,6.938224597934111});
  FELookupTable.push_back({0.992400000000005,6.953178719164228});
  FELookupTable.push_back({0.992500000000005,6.968326790593942});
  FELookupTable.push_back({0.992600000000005,6.983673982994381});
  FELookupTable.push_back({0.992700000000005,6.999225677333160});
  FELookupTable.push_back({0.992800000000005,7.014987475102734});
  FELookupTable.push_back({0.992900000000005,7.030965215659773});
  FELookupTable.push_back({0.993000000000005,7.047164981987189});
  FELookupTable.push_back({0.993100000000005,7.063593119905291});
  FELookupTable.push_back({0.993200000000005,7.080256252045519});
  FELookupTable.push_back({0.993300000000005,7.097161294209080});
  FELookupTable.push_back({0.993400000000005,7.114315472953024});
  FELookupTable.push_back({0.993500000000005,7.131726344516046});
  FELookupTable.push_back({0.993600000000005,7.149401815208428});
  FELookupTable.push_back({0.993700000000005,7.167350163404224});
  FELookupTable.push_back({0.993800000000005,7.185580063289314});
  FELookupTable.push_back({0.993900000000005,7.204100610536301});
  FELookupTable.push_back({0.994000000000005,7.222921350097097});
  FELookupTable.push_back({0.994100000000005,7.242052306326380});
  FELookupTable.push_back({0.994200000000005,7.261504015674635});
  FELookupTable.push_back({0.994300000000005,7.281287562218494});
  FELookupTable.push_back({0.994400000000005,7.301414616329226});
  FELookupTable.push_back({0.994500000000005,7.321897476818121});
  FELookupTable.push_back({0.994600000000005,7.342749116940974});
  FELookupTable.push_back({0.994700000000005,7.363983234693819});
  FELookupTable.push_back({0.994800000000005,7.385614307889620});
  FELookupTable.push_back({0.994900000000005,7.407657654572112});
  FELookupTable.push_back({0.995000000000005,7.430129499399975});
  FELookupTable.push_back({0.995080000000005,7.448427020316478});
  FELookupTable.push_back({0.995160000000005,7.467019063695014});
  FELookupTable.push_back({0.995240000000005,7.485915385691985});
  FELookupTable.push_back({0.995320000000005,7.505126236723785});
  FELookupTable.push_back({0.995400000000005,7.524662395468116});
  FELookupTable.push_back({0.995480000000005,7.544535205842342});
  FELookupTable.push_back({0.995560000000005,7.564756617277363});
  FELookupTable.push_back({0.995640000000005,7.585339228646012});
  FELookupTable.push_back({0.995720000000005,7.606296336251486});
  FELookupTable.push_back({0.995800000000005,7.627641986334721});
  FELookupTable.push_back({0.995880000000005,7.649391032621498});
  FELookupTable.push_back({0.995960000000005,7.671559199501257});
  FELookupTable.push_back({0.996040000000005,7.694163151512605});
  FELookupTable.push_back({0.996120000000005,7.717220569906628});
  FELookupTable.push_back({0.996200000000005,7.740750237171600});
  FELookupTable.push_back({0.996280000000005,7.764772130534059});
  FELookupTable.push_back({0.996360000000005,7.789307525605535});
  FELookupTable.push_back({0.996440000000005,7.814379111525948});
  FELookupTable.push_back({0.996520000000005,7.840011119169366});
  FELookupTable.push_back({0.996600000000005,7.866229464232473});
  FELookupTable.push_back({0.996680000000005,7.893061907329212});
  FELookupTable.push_back({0.996760000000005,7.920538233577215});
  FELookupTable.push_back({0.996840000000005,7.948690454596290});
  FELookupTable.push_back({0.996920000000004,7.977553036362851});
  FELookupTable.push_back({0.997000000000004,8.007163156998043});
  FELookupTable.push_back({0.997080000000004,8.037560999338179});
  FELookupTable.push_back({0.997160000000004,8.068790084078017});
  FELookupTable.push_back({0.997240000000004,8.100897650434693});
  FELookupTable.push_back({0.997320000000004,8.133935092709439});
  FELookupTable.push_back({0.997400000000004,8.167958462899854});
  FELookupTable.push_back({0.997480000000004,8.203029051734964});
  FELookupTable.push_back({0.997560000000004,8.239214063297153});
  FELookupTable.push_back({0.997640000000004,8.276587401931273});
  FELookupTable.push_back({0.997720000000004,8.315230594652480});
  FELookupTable.push_back({0.997800000000004,8.355233878064427});
  FELookupTable.push_back({0.997880000000004,8.396697486317493});
  FELookupTable.push_back({0.997960000000004,8.439733186467937});
  FELookupTable.push_back({0.998040000000004,8.484466120575730});
  FELookupTable.push_back({0.998120000000004,8.531037031181622});
  FELookupTable.push_back({0.998200000000004,8.579604970125782});
  FELookupTable.push_back({0.998280000000004,8.630350622474950});
  FELookupTable.push_back({0.998360000000004,8.683480421249735});
  FELookupTable.push_back({0.998440000000004,8.739231690147237});
  FELookupTable.push_back({0.998520000000004,8.797879138870393});
  FELookupTable.push_back({0.998600000000004,8.859743161975864});
  FELookupTable.push_back({0.998680000000004,8.925200577949967});
  FELookupTable.push_back({0.998760000000004,8.994698724038525});
  FELookupTable.push_back({0.998840000000004,9.068774250110653});
  FELookupTable.push_back({0.998920000000004,9.148078627495364});
  FELookupTable.push_back({0.999000000000004,9.233413476313098});
  FELookupTable.push_back({0.999018000000004,9.253542505671572});
  FELookupTable.push_back({0.999036000000004,9.274039544232910});
  FELookupTable.push_back({0.999054000000004,9.294918403394870});
  FELookupTable.push_back({0.999072000000004,9.316193688442686});
  FELookupTable.push_back({0.999090000000003,9.337880860636391});
  FELookupTable.push_back({0.999108000000003,9.359996305491972});
  FELookupTable.push_back({0.999126000000003,9.382557408013124});
  FELookupTable.push_back({0.999144000000003,9.405582635740618});
  FELookupTable.push_back({0.999162000000003,9.429091630615130});
  FELookupTable.push_back({0.999180000000003,9.453105310800641});
  FELookupTable.push_back({0.999198000000003,9.477645983793671});
  FELookupTable.push_back({0.999216000000003,9.502737472353896});
  FELookupTable.push_back({0.999234000000003,9.528405255041342});
  FELookupTable.push_back({0.999252000000003,9.554676623442184});
  FELookupTable.push_back({0.999270000000003,9.581580858519994});
  FELookupTable.push_back({0.999288000000003,9.609149428954847});
  FELookupTable.push_back({0.999306000000003,9.637416214845455});
  FELookupTable.push_back({0.999324000000003,9.666417759838328});
  FELookupTable.push_back({0.999342000000003,9.696193562045043});
  FELookupTable.push_back({0.999360000000003,9.726786395338188});
  FELookupTable.push_back({0.999378000000003,9.758242686675946});
  FELookupTable.push_back({0.999396000000003,9.790612943468624});
  FELookupTable.push_back({0.999414000000003,9.823952246621463});
  FELookupTable.push_back({0.999432000000003,9.858320820407481});
  FELookupTable.push_back({0.999450000000003,9.893784694005120});
  FELookupTable.push_back({0.999468000000003,9.930416472989414});
  FELookupTable.push_back({0.999486000000003,9.968296243470228});
  FELookupTable.push_back({0.999504000000003,10.007512637232121});
  FELookupTable.push_back({0.999522000000003,10.048164093565202});
  FELookupTable.push_back({0.999540000000003,10.090360363063517});
  FELookupTable.push_back({0.999558000000003,10.134224311316547});
  FELookupTable.push_back({0.999576000000002,10.179894097275822});
  FELookupTable.push_back({0.999594000000002,10.227525823786593});
  FELookupTable.push_back({0.999612000000002,10.277296788722689});
  FELookupTable.push_back({0.999630000000002,10.329409507876610});
  FELookupTable.push_back({0.999648000000002,10.384096740521404});
  FELookupTable.push_back({0.999666000000002,10.441627833438005});
  FELookupTable.push_back({0.999684000000002,10.502316821725984});
  FELookupTable.push_back({0.999702000000002,10.566532904783170});
  FELookupTable.push_back({0.999720000000002,10.634714185765588});
  FELookupTable.push_back({0.999738000000002,10.707385976453001});
  FELookupTable.push_back({0.999756000000002,10.785185618983585});
  FELookupTable.push_back({0.999774000000002,10.868896824501567});
  FELookupTable.push_back({0.999792000000002,10.959498275335049});
  FELookupTable.push_back({0.999810000000002,11.058234252503306});
  FELookupTable.push_back({0.999828000000002,11.166720475398881});
  FELookupTable.push_back({0.999846000000002,11.287108585559285});
  FELookupTable.push_back({0.999864000000002,11.422353199064393});
  FELookupTable.push_back({0.999882000000002,11.576669395569532});
  FELookupTable.push_back({0.999900000000002,11.756371222289467});
  FELookupTable.push_back({0.999901800000002,11.776078931411686});
  FELookupTable.push_back({0.999903600000002,11.796148590442048});
  FELookupTable.push_back({0.999905400000002,11.816593804001366});
  FELookupTable.push_back({0.999907200000002,11.837428959401754});
  FELookupTable.push_back({0.999909000000002,11.858669287895632});
  FELookupTable.push_back({0.999910800000002,11.880330932037724});
  FELookupTable.push_back({0.999912600000002,11.902431019907233});
  FELookupTable.push_back({0.999914400000002,11.924987747046254});
  FELookupTable.push_back({0.999916200000002,11.948020467097708});
  FELookupTable.push_back({0.999918000000002,11.971549792275500});
  FELookupTable.push_back({0.999919800000002,11.995597704975516});
  FELookupTable.push_back({0.999921600000002,12.020187682043915});
  FELookupTable.push_back({0.999923400000002,12.045344833465588});
  FELookupTable.push_back({0.999925200000003,12.071096057529097});
  FELookupTable.push_back({0.999927000000003,12.097470214874713});
  FELookupTable.push_back({0.999928800000003,12.124498324252780});
  FELookupTable.push_back({0.999930600000003,12.152213783326086});
  FELookupTable.push_back({0.999932400000003,12.180652618463075});
  FELookupTable.push_back({0.999934200000003,12.209853768213959});
  FELookupTable.push_back({0.999936000000003,12.239859406072734});
  FELookupTable.push_back({0.999937800000003,12.270715309246487});
  FELookupTable.push_back({0.999939600000003,12.302471281534871});
  FELookupTable.push_back({0.999941400000003,12.335181640138178});
  FELookupTable.push_back({0.999943200000003,12.368905778356325});
  FELookupTable.push_back({0.999945000000003,12.403708818837220});
  FELookupTable.push_back({0.999946800000003,12.439662375446797});
  FELookupTable.push_back({0.999948600000003,12.476845446187113});
  FELookupTable.push_back({0.999950400000003,12.515345465184703});
  FELookupTable.push_back({0.999952200000003,12.555259549022326});
  FELookupTable.push_back({0.999954000000003,12.596695982165404});
  FELookupTable.push_back({0.999955800000003,12.639775998740012});
  FELookupTable.push_back({0.999957600000003,12.684635934586082});
  FELookupTable.push_back({0.999959400000003,12.731429845962841});
  FELookupTable.push_back({0.999961200000004,12.780332721887055});
  FELookupTable.push_back({0.999963000000004,12.831544459325555});
  FELookupTable.push_back({0.999964800000004,12.885294829570222});
  FELookupTable.push_back({0.999966600000004,12.941849748072714});
  FELookupTable.push_back({0.999968400000004,13.001519281209355});
  FELookupTable.push_back({0.999970200000004,13.064668001572043});
  FELookupTable.push_back({0.999972000000004,13.131728570416481});
  FELookupTable.push_back({0.999973800000004,13.203219835118141});
  FELookupTable.push_back({0.999975600000004,13.279771372179017});
  FELookupTable.push_back({0.999977400000004,13.362157443952032});
  FELookupTable.push_back({0.999979200000004,13.451345065740707});
  FELookupTable.push_back({0.999981000000004,13.548563864200716});
  FELookupTable.push_back({0.999982800000004,13.655410777978911});
  FELookupTable.push_back({0.999984600000004,13.774012793834407});
  FELookupTable.push_back({0.999986400000004,13.907291201098836});
  FELookupTable.push_back({0.999988200000004,14.059414361398282});
  FELookupTable.push_back({0.999990000000004,14.236627712421800});
  FELookupTable.push_back({0.999990180000004,14.256066674678511});
  FELookupTable.push_back({0.999990360000004,14.275863482335588});
  FELookupTable.push_back({0.999990540000004,14.296031597357137});
  FELookupTable.push_back({0.999990720000004,14.316585256589738});
  FELookupTable.push_back({0.999990900000004,14.337539532422255});
  FELookupTable.push_back({0.999991080000004,14.358910399501498});
  FELookupTable.push_back({0.999991260000004,14.380714808244104});
  FELookupTable.push_back({0.999991440000005,14.402970765992908});
  FELookupTable.push_back({0.999991620000005,14.425697426149762});
  FELookupTable.push_back({0.999991800000005,14.448915190268828});
  FELookupTable.push_back({0.999991980000005,14.472645814735248});
  FELookupTable.push_back({0.999992160000005,14.496912536451664});
  FELookupTable.push_back({0.999992340000005,14.521740209572110});
  FELookupTable.push_back({0.999992520000005,14.547155459211201});
  FELookupTable.push_back({0.999992700000005,14.573186853864332});
  FELookupTable.push_back({0.999992880000005,14.599865099340843});
  FELookupTable.push_back({0.999993060000005,14.627223257514332});
  FELookupTable.push_back({0.999993240000005,14.655296993801960});
  FELookupTable.push_back({0.999993420000005,14.684124858023482});
  FELookupTable.push_back({0.999993600000005,14.713748604193729});
  FELookupTable.push_back({0.999993780000005,14.744213555911074});
  FELookupTable.push_back({0.999993960000005,14.775569025373983});
  FELookupTable.push_back({0.999994140000005,14.807868795758722});
  FELookupTable.push_back({0.999994320000005,14.841171678816814});
  FELookupTable.push_back({0.999994500000005,14.875542162224132});
  FELookupTable.push_back({0.999994680000005,14.911051164598515});
  FELookupTable.push_back({0.999994860000005,14.947776920420075});
  FELookupTable.push_back({0.999995040000005,14.985806022637318});
  FELookupTable.push_back({0.999995220000005,15.025234657932502});
  FELookupTable.push_back({0.999995400000005,15.066170079018846});
  FELookupTable.push_back({0.999995580000005,15.108732370744248});
  FELookupTable.push_back({0.999995760000005,15.153056583305377});
  FELookupTable.push_back({0.999995940000005,15.199295328145046});
  FELookupTable.push_back({0.999996120000005,15.247621962459213});
  FELookupTable.push_back({0.999996300000005,15.298234530137446});
  FELookupTable.push_back({0.999996480000005,15.351360685589388});
  FELookupTable.push_back({0.999996660000005,15.407263910183532});
  FELookupTable.push_back({0.999996840000005,15.466251451248652});
  FELookupTable.push_back({0.999997020000005,15.528684590297491});
  FELookupTable.push_back({0.999997200000005,15.594992112058307});
  FELookupTable.push_back({0.999997380000005,15.665688251907518});
  FELookupTable.push_back({0.999997560000005,15.741397036980747});
  FELookupTable.push_back({0.999997740000005,15.822885965836820});
  FELookupTable.push_back({0.999997920000005,15.911113686773890});
  FELookupTable.push_back({0.999998100000005,16.007299296454129});
  FELookupTable.push_back({0.999998280000005,16.113026210001653});
  FELookupTable.push_back({0.999998460000005,16.230403620300287});
  FELookupTable.push_back({0.999998640000005,16.362328703909832});
  FELookupTable.push_back({0.999998820000005,16.512935927328922});
  FELookupTable.push_back({0.999999000000005,16.688420796116461});
  FELookupTable.push_back({0.999999018000005,16.707672557156037});
  FELookupTable.push_back({0.999999036000005,16.727279198391056});
  FELookupTable.push_back({0.999999054000005,16.747254077390636});
  FELookupTable.push_back({0.999999072000005,16.767611320847379});
  FELookupTable.push_back({0.999999090000005,16.788365884800243});
  FELookupTable.push_back({0.999999108000005,16.809533620870706});
  FELookupTable.push_back({0.999999126000006,16.831131349247531});
  FELookupTable.push_back({0.999999144000006,16.853176939262489});
  FELookupTable.push_back({0.999999162000006,16.875689398524823});
  FELookupTable.push_back({0.999999180000006,16.898688971729143});
  FELookupTable.push_back({0.999999198000006,16.922197250424748});
  FELookupTable.push_back({0.999999216000006,16.946237295238934});
  FELookupTable.push_back({0.999999234000006,16.970833772289456});
  FELookupTable.push_back({0.999999252000006,16.996013105810267});
  FELookupTable.push_back({0.999999270000006,17.021803649359533});
  FELookupTable.push_back({0.999999288000006,17.048235878393125});
  FELookupTable.push_back({0.999999306000006,17.075342607485481});
  FELookupTable.push_back({0.999999324000006,17.103159236083510});
  FELookupTable.push_back({0.999999342000006,17.131724027413217});
  FELookupTable.push_back({0.999999360000006,17.161078426055731});
  FELookupTable.push_back({0.999999378000006,17.191267420811027});
  FELookupTable.push_back({0.999999396000006,17.222339960828243});
  FELookupTable.push_back({0.999999414000006,17.254349434671401});
  FELookupTable.push_back({0.999999432000006,17.287354224101069});
  FELookupTable.push_back({0.999999450000006,17.321418347008503});
  FELookupTable.push_back({0.999999468000006,17.356612207302007});
  FELookupTable.push_back({0.999999486000006,17.393013473834795});
  FELookupTable.push_back({0.999999504000006,17.430708115977069});
  FELookupTable.push_back({0.999999522000007,17.469791630579454});
  FELookupTable.push_back({0.999999540000007,17.510370504414446});
  FELookupTable.push_back({0.999999558000007,17.552563968505979});
  FELookupTable.push_back({0.999999576000007,17.596506117182297});
  FELookupTable.push_back({0.999999594000007,17.642348486816434});
  FELookupTable.push_back({0.999999612000007,17.690263219382260});
  FELookupTable.push_back({0.999999630000007,17.740446977590775});
  FELookupTable.push_back({0.999999648000007,17.793125836636573});
  FELookupTable.push_back({0.999999666000007,17.848561460344712});
  FELookupTable.push_back({0.999999684000007,17.907058988994386});
  FELookupTable.push_back({0.999999702000007,17.968977241726371});
  FELookupTable.push_back({0.999999720000007,18.034742099758695});
  FELookupTable.push_back({0.999999738000007,18.104864340192059});
  FELookupTable.push_back({0.999999756000007,18.179963824044687});
  FELookupTable.push_back({0.999999774000007,18.260802965616705});
  FELookupTable.push_back({0.999999792000007,18.348334115355136});
  FELookupTable.push_back({0.999999810000007,18.443768432545440});
  FELookupTable.push_back({0.999999828000007,18.548679122594365});
  FELookupTable.push_back({0.999999846000007,18.665161922048370});
  FELookupTable.push_back({0.999999864000007,18.796095738868125});
  FELookupTable.push_back({0.999999882000007,18.945589307006134});
  FELookupTable.push_back({0.999999900000007,19.119800137437821});
  FELookupTable.push_back({0.999999901800008,19.138913643776029});
  FELookupTable.push_back({0.999999903600008,19.158379785952672});
  FELookupTable.push_back({0.999999905400008,19.178211841774896});
  FELookupTable.push_back({0.999999907200008,19.198423853747890});
  FELookupTable.push_back({0.999999909000008,19.219030688960611});
  FELookupTable.push_back({0.999999910800008,19.240048104951839});
  FELookupTable.push_back({0.999999912600008,19.261492822287973});
  FELookupTable.push_back({0.999999914400008,19.283382604690352});
  FELookupTable.push_back({0.999999916200008,19.305736347674735});
  FELookupTable.push_back({0.999999918000008,19.328574176811593});
  FELookupTable.push_back({0.999999919800008,19.351917556888480});
  FELookupTable.push_back({0.999999921600008,19.375789413458897});
  FELookupTable.push_back({0.999999923400008,19.400214268503802});
  FELookupTable.push_back({0.999999925200008,19.425218392219026});
  FELookupTable.push_back({0.999999927000008,19.450829973285046});
  FELookupTable.push_back({0.999999928800008,19.477079310387762});
  FELookupTable.push_back({0.999999930600008,19.503999028254764});
  FELookupTable.push_back({0.999999932400008,19.531624322072375});
  FELookupTable.push_back({0.999999934200008,19.559993234879009});
  FELookupTable.push_back({0.999999936000008,19.589146973422594});
  FELookupTable.push_back({0.999999937800008,19.619130269065927});
  FELookupTable.push_back({0.999999939600008,19.649991791677376});
  FELookupTable.push_back({0.999999941400008,19.681784626125506});
  FELookupTable.push_back({0.999999943200008,19.714566823097421});
  FELookupTable.push_back({0.999999945000008,19.748402038602759});
  FELookupTable.push_back({0.999999946800008,19.783360279871683});
  FELookupTable.push_back({0.999999948600009,19.819518779622957});
  FELookupTable.push_back({0.999999950400009,19.856963026163687});
  FELookupTable.push_back({0.999999952200009,19.895787983891083});
  FELookupTable.push_back({0.999999954000009,19.936099548059037});
  FELookupTable.push_back({0.999999955800009,19.978016289934363});
  FELookupTable.push_back({0.999999957600009,20.021671564810791});
  FELookupTable.push_back({0.999999959400009,20.067216077368247});
  FELookupTable.push_back({0.999999961200009,20.114821028879518});
  FELookupTable.push_back({0.999999963000009,20.164682012198234});
  FELookupTable.push_back({0.999999964800009,20.217023878441744});
  FELookupTable.push_back({0.999999966600009,20.272106881638919});
  FELookupTable.push_back({0.999999968400009,20.330234526518463});
  FELookupTable.push_back({0.999999970200009,20.391763719394493});
  FELookupTable.push_back({0.999999972000009,20.457118084156502});
  FELookupTable.push_back({0.999999973800009,20.526805706995642});
  FELookupTable.push_back({0.999999975600009,20.601443204339333});
  FELookupTable.push_back({0.999999977400009,20.681789027081265});
  FELookupTable.push_back({0.999999979200009,20.768790611242480});
  FELookupTable.push_back({0.999999981000009,20.863652915592660});
  FELookupTable.push_back({0.999999982800009,20.967941160609779});
  FELookupTable.push_back({0.999999984600009,21.083740545443320});
  FELookupTable.push_back({0.999999986400009,21.213915652477443});
  FELookupTable.push_back({0.999999988200009,21.362555006289522});
  FELookupTable.push_back({0.999999990000009,21.535786227277228});
  FELookupTable.push_back({0.999999990360009,21.574151204790930});
  FELookupTable.push_back({0.999999990720009,21.613973311354567});
  FELookupTable.push_back({0.999999991080009,21.655367763871684});
  FELookupTable.push_back({0.999999991440010,21.698464014904783});
  FELookupTable.push_back({0.999999991800010,21.743408199455128});
  FELookupTable.push_back({0.999999992160010,21.790366131183330});
  FELookupTable.push_back({0.999999992520010,21.839527003130559});
  FELookupTable.push_back({0.999999992880010,21.891108001587675});
  FELookupTable.push_back({0.999999993240010,21.945360117616815});
  FELookupTable.push_back({0.999999993600010,22.002575549843346});
  FELookupTable.push_back({0.999999993960010,22.063097251862995});
  FELookupTable.push_back({0.999999994320010,22.127331415998512});
  FELookupTable.push_back({0.999999994680010,22.195764048650961});
  FELookupTable.push_back({0.999999995040010,22.268983360226613});
  FELookupTable.push_back({0.999999995400010,22.347710603478880});
  FELookupTable.push_back({0.999999995760010,22.432843500595681});
  FELookupTable.push_back({0.999999996120010,22.525518979007366});
  FELookupTable.push_back({0.999999996480010,22.627206533557789});
  FELookupTable.push_back({0.999999996840010,22.739852118846617});
  FELookupTable.push_back({0.999999997200010,22.866109421654208});
  FELookupTable.push_back({0.999999997560010,23.009731112149609});
  FELookupTable.push_back({0.999999997920010,23.176274532114530});
  FELookupTable.push_back({0.999999998280010,23.374484259870336});
  FELookupTable.push_back({0.999999998640010,23.619320068119528});
  FELookupTable.push_back({0.999999999000010,23.939738420121763});
  FELookupTable.push_back({0.999999999036010,23.977933068907060});
  FELookupTable.push_back({0.999999999072010,24.017578996748409});
  FELookupTable.push_back({0.999999999108010,24.058790979999625});
  FELookupTable.push_back({0.999999999144010,24.101697978019882});
  FELookupTable.push_back({0.999999999180010,24.146445571134723});
  FELookupTable.push_back({0.999999999216010,24.193198946099884});
  FELookupTable.push_back({0.999999999252010,24.242146583197506});
  FELookupTable.push_back({0.999999999288010,24.293504855261336});
  FELookupTable.push_back({0.999999999324010,24.347523816226072});
  FELookupTable.push_back({0.999999999360010,24.404494579404187});
  FELookupTable.push_back({0.999999999396010,24.464758830997425});
  FELookupTable.push_back({0.999999999432010,24.528721270292902});
  FELookupTable.push_back({0.999999999468010,24.596866127513124});
  FELookupTable.push_back({0.999999999504010,24.669779476555352});
  FELookupTable.push_back({0.999999999540010,24.748179967737673});
  FELookupTable.push_back({0.999999999576010,24.832962107274220});
  FELookupTable.push_back({0.999999999612010,24.925258781550344});
  FELookupTable.push_back({0.999999999648010,25.026534307286344});
  FELookupTable.push_back({0.999999999684010,25.138727847768831});
  FELookupTable.push_back({0.999999999720010,25.264483928624177});
  FELookupTable.push_back({0.999999999756010,25.407542425510258});
  FELookupTable.push_back({0.999999999792010,25.573442008048993});
  FELookupTable.push_back({0.999999999828010,25.770898389030037});
  FELookupTable.push_back({0.999999999864010,26.014823051896528});
  FELookupTable.push_back({0.999999999900010,26.334081781498789});
  FELookupTable.push_back({0.999999999903610,26.372140864343439});
  FELookupTable.push_back({0.999999999907210,26.411646656977357});
  FELookupTable.push_back({0.999999999910810,26.452713601279797});
  FELookupTable.push_back({0.999999999914410,26.495470283486394});
  FELookupTable.push_back({0.999999999918010,26.540061865922308});
  FELookupTable.push_back({0.999999999921610,26.586653064928424});
  FELookupTable.push_back({0.999999999925210,26.635431829158748});
  FELookupTable.push_back({0.999999999928810,26.686613925721456});
  FELookupTable.push_back({0.999999999932410,26.740448717083289});
  FELookupTable.push_back({0.999999999936010,26.797226520187827});
  FELookupTable.push_back({0.999999999939610,26.857288098124258});
  FELookupTable.push_back({0.999999999943210,26.921037071836455});
  FELookupTable.push_back({0.999999999946810,26.988956401020143});
  FELookupTable.push_back({0.999999999950410,27.061630648251281});
  FELookupTable.push_back({0.999999999954010,27.139776646787872});
  FELookupTable.push_back({0.999999999957610,27.224286691779593});
  FELookupTable.push_back({0.999999999961210,27.316290942281629});
  FELookupTable.push_back({0.999999999964810,27.417250298475398});
  FELookupTable.push_back({0.999999999968410,27.529099567576388});
  FELookupTable.push_back({0.999999999972010,27.654477608272703});
  FELookupTable.push_back({0.999999999975610,27.797116753906661});
  FELookupTable.push_back({0.999999999979210,27.962545381535026});
  FELookupTable.push_back({0.999999999982810,28.159464810163890});
  FELookupTable.push_back({0.999999999986410,28.402766150432726});
  FELookupTable.push_back({0.999999999990010,28.721288086605750});
  FELookupTable.push_back({0.999999999990910,28.818984642140432});
  FELookupTable.push_back({0.999999999991810,28.926849189335758});
  FELookupTable.push_back({0.999999999992710,29.047266140275831});
  FELookupTable.push_back({0.999999999993610,29.183549203098629});
  FELookupTable.push_back({0.999999999994510,29.340527136511362});
  FELookupTable.push_back({0.999999999995410,29.525636479860317});
  FELookupTable.push_back({0.999999999996310,29.751221022101060});
  FELookupTable.push_back({0.999999999997210,30.040103819408650});
  FELookupTable.push_back({0.999999999998110,30.442341688614484});
  FELookupTable.push_back({0.999999999999009,31.109682782885979});
  FELookupTable.push_back({0.999999999999099,31.208040243925904});
  FELookupTable.push_back({0.999999999999190,31.316756825330941});
  FELookupTable.push_back({0.999999999999280,31.438275936595154});
  FELookupTable.push_back({0.999999999999370,31.576022751925258});
  FELookupTable.push_back({0.999999999999460,31.735012792454487});
  FELookupTable.push_back({0.999999999999550,31.923020137666558});
  FELookupTable.push_back({0.999999999999640,32.153065114817139});
  FELookupTable.push_back({0.999999999999730,32.449547556589941});
  FELookupTable.push_back({0.999999999999820,32.867216483190703});
  FELookupTable.push_back({0.999999999999910,33.580592853993238});
  FELookupTable.push_back({0.999999999999928,33.809725008755549});
  FELookupTable.push_back({0.999999999999946,34.104823712516215});
  FELookupTable.push_back({0.999999999999964,34.519999080506807});
  FELookupTable.push_back({0.999999999999982,35.226731425301175});

  if(GetVerboseLevel()>1) {
    G4cout << GetProcessName() << " is created " << G4endl;
  }
}
//---------------------------------------------------------------------
ReactionFusEvap::~ReactionFusEvap() { ; }
//---------------------------------------------------------------------
G4VParticleChange *ReactionFusEvap::PostStepDoIt(const G4Track &aTrack, const G4Step &)
{
  // initialize
  killTrack = true;
  numRepeats = 0;
  // Check momentum conservation:
  //G4ThreeVector pInit = aTrack.GetMomentum();
  //G4cout << "Initial Momentum (beam):" << pInit << G4endl;

  while(killTrack == true){ // repeat the reaction code until a good event is obtained

    if(numRepeats > maxNumRepeats){
      G4cout << "ERROR: Maximum number of failed attempts to simulate fusion-evaporation ("
      << maxNumRepeats << ") was exceeded!" << G4endl;
      G4cout << "This is likely caused by the reaction parameters being set to "
                "non-physical values.  Modify the reaction parameters and try "
                "again.  The number of attempts done before displaying this "
                "message may be set using /Reaction/MaxNumAttempts" << G4endl;
      exit(EXIT_FAILURE);
    }

    killTrack = false;
    aParticleChange.Initialize(aTrack);

    // define all dynamic particles
    G4DynamicParticle *RecoilOut;
    G4DynamicParticle *EvapP[MAXNUMEVAP];
    G4DynamicParticle *EvapN[MAXNUMEVAP];
    G4DynamicParticle *EvapA[MAXNUMEVAP];
    RecoilOut = new G4DynamicParticle();
    for(int i = 0; i < nP; i++){ // protons
      if(i < MAXNUMEVAP){
        EvapP[i] = new G4DynamicParticle();
      }
    }
    for(int i = 0; i < nN; i++){ // neutrons
      if(i < MAXNUMEVAP){
        EvapN[i] = new G4DynamicParticle();
      }
    }
    for(int i = 0; i < nA; i++){ // alphas
      if(i < MAXNUMEVAP){
        EvapA[i] = new G4DynamicParticle();
      }
    }

    if(reaction_here){
      reaction_here = false;

      // get properties of the beam-target system
      G4ThreeVector pIn = aTrack.GetMomentum();
      G4ThreeVector cmv = GetCMVelocity(aTrack); // center of mass velocity

      // calculate the initial excitation from momentum conservation:
      SetupReactionProducts(aTrack,RecoilOut);
      // G4cout << "Calculated initExi: "<< initExi << MeV <<G4endl;
      // getc(stdin);

      // generate energy values for each particle to be evaporated
      for(int i = 0; i < (nP + nN + nA); i++){
        if(i < MAXNUMEVAP){
          evapE[i] = 0.;
          // clamp particle energies to physically possible values
          //while ( ((evapE[i] + QEvap[i]) <= 0.0) || ((evapE[i] + QEvap[i]) > initExi) ){
          int exiAttempts = 0;
          while( (evapE[i] <= 0.0) || (evapE[i] > (initExi+QEvap[i]) ) ){
            if(exiAttempts > maxNumRepeats){
              //we can't get a valid particle energy
              killTrack = true;
              break;
            }
            if(useTabulatedExi){
              evapE[i] = getTabulatedExi(QEvap[i]);
            }else{
              evapE[i] = getExi(exiV, exikT);
            }
            exiAttempts++;
          }
        }
      }

      // FILE *out1, *out2;
      // if((out1=fopen("exi1.txt","a"))==NULL)
      // 	{printf("Cannot open output\n");exit(EXIT_FAILURE);}
      // if((out2=fopen("exi2.txt","a"))==NULL)
      // 	{printf("Cannot open output\n");exit(EXIT_FAILURE);}
      // fprintf(out1,"%.5f\n",evapE[0]);
      // fprintf(out2,"%.5f\n",evapE[1]);
      // fclose(out1);
      // fclose(out2);
      
      if(killTrack == false){
        // check that sum of particle energy values is in bounds
        totalEvapE = 0;
        totalQEvap = 0;
        if(GetVerboseLevel()>1){
          G4cout<<"Initial energy of compound: "<<initExi<<G4endl;
        }
        for(int i = 0; i < (nP + nN + nA); i++){
          if(i < MAXNUMEVAP){
            totalEvapE += evapE[i];
            totalQEvap += QEvap[i];
            if(GetVerboseLevel()>1){
              G4cout<<"Total evaporation energy"<<totalEvapE<<G4endl;
              G4cout<<"Total Q value energy    "<<totalQEvap<<G4endl;
            }
          }
        }
        // if (totalEvapE > initExi) // not physically possible!
        //   killTrack = true;
        if((initExi - totalEvapE + totalQEvap) < Egammatot){ // not enough energy to emit gamma cascade
          killTrack = true;
        }
      }

      if(killTrack == false){
        if(SetupReactionProducts(aTrack, RecoilOut)){
          aParticleChange.ProposeTrackStatus(fStopAndKill);
          aParticleChange.SetNumberOfSecondaries(1 + nP + nN + nA);

          // generate the secondaries (alphas, protons, neutrons)
          //from fusion evaporation and correct the momentum of
          //the recoiling nucleus

          if(GetVerboseLevel()>1){
            G4cout << "---------------------" << G4endl;
            G4cout << "---------------------" << G4endl;
            G4cout << "New Reaction" << G4endl;
            G4cout << "---------------------" << G4endl;
            G4cout << "---------------------" << G4endl;
          }
          
          for(int i = 0; i < nP; i++){ // protons
            if(i < MAXNUMEVAP){ // check that the particle can be evaporated
              EvaporateWithMomentumCorrection(RecoilOut, RecoilOut, EvapP[i], proton, evapE[i], QEvap[i], cmv);
              aParticleChange.AddSecondary(EvapP[i], posIn, true); // evaporate the particle (momentum determined by EvaorateWithMomentumCorrection function)
            }else{
              killTrack = true; // this is no longer the desired reaction channel, kill it
            }
          }
          for(int i = 0; i < nN; i++){ // neutrons
            if(i < MAXNUMEVAP){ // check that the particle can be evaporated
              EvaporateWithMomentumCorrection(RecoilOut, RecoilOut, EvapN[i], neutron, evapE[i + nP], QEvap[i + nP], cmv);
              aParticleChange.AddSecondary(EvapN[i], posIn, true); // evaporate the particle (momentum determined by EvaporateWithMomentumCorrection function)
            }else{
              killTrack = true; // this is no longer the desired reaction channel, kill it
            }
          }
          for(int i = 0; i < nA; i++){ // alphas
            if(i < MAXNUMEVAP){ // check that the particle can be evaporated
              EvaporateWithMomentumCorrection(RecoilOut, RecoilOut, EvapA[i], alpha, evapE[i + nP + nN], QEvap[i + nP + nN], cmv);
              aParticleChange.AddSecondary(EvapA[i], posIn, true); // evaporate the particle (momentum determined by EvaporateWithMomentumCorrection function)
            }else{
              killTrack = true; // this is no longer the desired reaction channel, kill it
            }
          }
        }
      }
	    
      // Check that the angle of at least one of the evaporated particles
      // (in the lab frame) is in the user specified angular range.
      // Otherwise, kill the track.
      if((constrainedAngle == true) && (killTrack == false)){
	G4bool goodEvapAngle = false;
	for(int i = 0; i < nP; i++){
          if(goodEvapAngle == false){
            if(EvapP[i]->GetMomentumDirection().getTheta() < maxEvapAngle){
              if(EvapP[i]->GetMomentumDirection().getTheta() > minEvapAngle){
                goodEvapAngle = true;
              }
            }
          }
        }
	for(int i = 0; i < nN; i++){
          if(goodEvapAngle == false){
            if(EvapN[i]->GetMomentumDirection().getTheta() < maxEvapAngle){
              if(EvapN[i]->GetMomentumDirection().getTheta() > minEvapAngle){
                goodEvapAngle = true;
              }
            }
          }
        }
	for(int i = 0; i < nA; i++){
          if(goodEvapAngle == false){
            if(EvapA[i]->GetMomentumDirection().getTheta() < maxEvapAngle){
              if(EvapA[i]->GetMomentumDirection().getTheta() > minEvapAngle){
                goodEvapAngle = true;
              }
            }
          }
        }
	if(goodEvapAngle == false)
          killTrack = true;
      }

	    if(killTrack == false){
	      // store the proper momentum from evaporation and generate the residual nucleus
	      pRes_correct = RecoilOut->GetMomentum();
	      RecoilOut->SetDefinition(residual[0]); // give the residual the gamma decay process specified in TargetFaceCrossSection()
	      
	      // manually correct momentum (which GEANT may have changed based on excitation energy of the residual)
	      RecoilOut->SetMomentum(pRes_correct);
	      
	      aParticleChange.AddSecondary(RecoilOut, posIn, true);
	    }
	  }

    // repeat the reaction if neccessary
    if(killTrack == true){
      aParticleChange.ProposeTrackStatus(fKillTrackAndSecondaries);
      // G4cout << "Track killed, repeating..." << G4endl;
      reaction_here = true; // allow the reaction to repeat

      // deallocate (prevent memory leak)
      delete RecoilOut;
      for(int i = 0; i < nP; i++){ // protons
        if(i < MAXNUMEVAP){
          delete EvapP[i];
        }
      }
      for(int i = 0; i < nN; i++){ // neutrons
        if(i < MAXNUMEVAP){
          delete EvapN[i];
        }
      }
      for(int i = 0; i < nA; i++){ // alphas
        if(i < MAXNUMEVAP){
          delete EvapA[i];
        }
      }

      numRepeats++;
    }
  }

  return &aParticleChange;
}
//-----------------------------------------------------------------
G4double
ReactionFusEvap::PostStepGetPhysicalInteractionLength(const G4Track &aTrack, G4double,
                                               G4ForceCondition *condition) {
                                              
  reaction_here = false;
  *condition = NotForced;

  G4String name = aTrack.GetVolume()->GetLogicalVolume()->GetName();

  //G4cout << "PostStepGetPhysicalInteractionLength, name: " << name << G4endl;

  if(name == "target_log"){
    G4UserLimits *pUserLimits = aTrack.GetVolume()->GetLogicalVolume()->GetUserLimits();
    G4double ZReaction = pUserLimits->GetUserMinRange(aTrack);
    G4double ZCurrent = aTrack.GetPosition().getZ();
    G4double Z = ZReaction - ZCurrent;
    if(Z < 0){
      // 	      G4cout<<" Past the reaction point"<<G4endl;
      // 	      G4cout<<" Volume "<<name<<G4endl;
      // 	      G4cout<<" Z[mm]: reaction "<<ZReaction/mm<<" current
      // "<<ZCurrent/mm<<" DZ "<<Z/mm<<G4endl;
      return DBL_MAX;
    }
    if(Z > EPSILON){
      G4ThreeVector dir = aTrack.GetDynamicParticle()->GetMomentumDirection();

      dir *= (ZReaction - ZCurrent);
      // 	      G4cout<<" Before the reaction point"<<G4endl;
      // 	      G4cout<<" Volume "<<name<<G4endl;
      // 	      G4cout<<" Z[mm]: reaction "<<ZReaction/mm<<" current
      // "<<ZCurrent/mm<<" DZ "<<Z/mm<<G4endl;
      return dir.mag();
    }
    if(Z <= EPSILON){
      reaction_here = true;
      aTrack.GetVolume()->GetLogicalVolume()->GetUserLimits()->SetUserMinRange(-DBL_MAX);
      return 0.;
    }
  }

  return DBL_MAX;
}
/*============================================================================*/
G4bool ReactionFusEvap::SetupReactionProducts(const G4Track &aTrack,
                                       G4DynamicParticle *RecoilOut) {

  G4double Ain;
  G4double Zin;
  G4ThreeVector dirIn; // momentum direction of incoming particle

  Ain = aTrack.GetDynamicParticle()->GetDefinition()->GetAtomicMass();
  if(Ain != A1)
    return FALSE;
  Zin = aTrack.GetDynamicParticle()->GetDefinition()->GetAtomicNumber();
  if(Zin != Z1)
    return FALSE;

  dirIn = aTrack.GetMomentumDirection();
  posIn = aTrack.GetPosition();

  RecoilOut->SetDefinition(compound);
  RecoilOut->SetMomentum(aTrack.GetMomentum());
  initExi = aTrack.GetKineticEnergy() + QRxn - RecoilOut->GetKineticEnergy();
  // G4cout << "Calculated initExi: "<< initExi << G4endl;
  // getc(stdin);

  /*G4cout << "Before compound formation - Beam momentum (lab): " <<
  aTrack.GetMomentum() << ", Beam KE: " << aTrack.GetKineticEnergy()/MeV << "
  MeV." << G4endl;
  G4cout << "At compound formation - Recoil momentum (lab): " <<
  RecoilOut->GetMomentum() << ", Recoil KE: " <<
  RecoilOut->GetKineticEnergy()/MeV << " MeV." << G4endl;
  G4cout << "KE difference: " << aTrack.GetKineticEnergy()/MeV -
  RecoilOut->GetKineticEnergy()/MeV << " MeV." << G4endl;
  G4cout << "target A,Z: " << A2 << "," << Z2 << G4endl;
  G4cout << "compound A,Z: " << compound->GetAtomicMass() << "," <<
  compound->GetAtomicNumber() << G4endl;
        getc(stdin);*/

  return TRUE;
}
//---------------------------------------------------------------------
// Computes the momentum of the recoil system after the compound has emitted a
// particle.
// particleEnergy in MeV.

// cmv: center of mass velocity vector for the beam-target system
// vParticle: unit vector specifying evaporated particle's emission direction in
// the CM frame.

void ReactionFusEvap::EvaporateWithMomentumCorrection(G4DynamicParticle *Compound, G4DynamicParticle *ResidualOut, G4DynamicParticle *EvaporatedParticle,G4ParticleDefinition *EvaporatedParticleDef, G4double deltaExi,G4double Qevap, G4ThreeVector cmv)
{
  G4ThreeVector pRec, pParticle; // momenta
  G4ThreeVector vParticle;       // velocity
  // G4ThreeVector cmv=(Compound->GetMomentum()) /
  // (Compound->GetDefinition()->GetPDGMass()); //center of mass velocity (ie.
  // initial compound velocity in the lab frame)
  // G4double Qevap; //Q of the evaporation process
  // G4cout << "cmv: " <<  cmv << G4endl;
  // G4cout << "Q: " <<  Qevap << ", deltaExi: " << deltaExi << G4endl;
  // G4cout << "Before Evaporation - Compound momentum: " <<
  // Compound->GetMomentum() << ", Compound KE: " <<
  // Compound->GetKineticEnergy() << G4endl;
  // G4cout << "Compound mass: " << Compound->GetDefinition()->GetPDGMass() <<
  // G4endl;

  // define the residual particle after evaporation
  G4ParticleDefinition *RecoilResidual;
  G4int rrecA = Compound->GetDefinition()->GetAtomicMass() - EvaporatedParticleDef->GetAtomicMass();
  G4int rrecZ = Compound->GetDefinition()->GetAtomicNumber() - EvaporatedParticleDef->GetAtomicNumber();
  RecoilResidual = G4IonTable::GetIonTable()->GetIon(rrecZ, rrecA, 0); // 3rd parameter is excitation energy - what does this do?

  if(GetVerboseLevel()>1){
    G4cout << "===========" << G4endl;
    G4cout << "===========" << G4endl;
    G4cout << "Compound mass: " << Compound->GetMass() << G4endl;
    G4cout << "Residual mass: " << RecoilResidual->GetPDGMass() << G4endl;
    G4cout << "===========" << G4endl;
  }

  /////// MATT COMMENTED
  // deltaExi = deltaExi + Qevap; // amount of the excitation energy that goes into KE of the products
  // if (deltaExi < 0.0) {
  //   G4cerr << "ERROR!  Excitation energy (" << (deltaExi-Qevap) << ") is smaller than the Q value (" << -1.*Qevap << ")!  "
  //             "Evaporation should not occur!"
  //          << G4endl;
  //   G4cerr << "Please check the reaction PostStepDoIt code and correct this!"
  //          << G4endl;
  // }


  
  // derive the center of mass energy of the evaporated particle from the change
  // in excitation energy of the compound
  
  G4double particleCMEnergy = deltaExi;
  //G4double particleCMEnergy = deltaExi * (1.0 / (((1.0 * EvaporatedParticleDef->GetAtomicMass()) / (1.0 * RecoilResidual->GetAtomicMass())) + 1.0));
  
  // G4cout << "deltaExi: " << deltaExi << ", CM energy of evaporated particle: " << particleCMEnergy << " MeV." << G4endl;
  // G4cout << "CM energy of recoil particle: " << deltaExi - particleCMEnergy
  // << " MeV." << G4endl;


  if(GetVerboseLevel()>1){
    G4cout << "CM energy of evaporated particle " << particleCMEnergy << " MeV" << G4endl;
  }

  
  // set up the momentum of the evaporated particle
  G4double vParticleMag = sqrt(2.0 * particleCMEnergy / (EvaporatedParticleDef->GetPDGMass())); // set magnitude of the emitted particle's velocity (center of mass frame)
  
  // generate a unit vector in a random
  // direction (direction of particle emission)
  vParticle = G4RandomDirection();
  
  // calculate velocity vector of emitted particle in CM frame
  vParticle = vParticle * vParticleMag;

  if(GetVerboseLevel()>1){
    G4cout << "CM velocity of evaporated particle " << vParticle << G4endl;
    G4cout << "CM momentum of evaporated particle " << vParticle * EvaporatedParticleDef->GetPDGMass() << G4endl;
  }
  
  // boost velocity to lab frame
  vParticle += cmv;

  if(GetVerboseLevel()>1){
    G4cout << "Velocity of CM of system " << cmv << G4endl;
    G4cout << "LAB velocity of evaporated particle" << vParticle << G4endl;
    G4cout << "===========" << G4endl;
  }
  
  // get lab frame momentum
  pParticle = vParticle * EvaporatedParticleDef->GetPDGMass();

  // determine the momentum of the residual particle
  pRec = Compound->GetMomentum(); // initially, residual has the same momentum as the compound system

  if(GetVerboseLevel()>1){
    G4cout << "LAB compound momentum: " << pRec << G4endl;
    G4cout << "LAB compound KE: " << Compound->GetKineticEnergy() << G4endl;
  }
  
  pRec -= pParticle; // subtract momentum of the emitted particle from the residual

  // set properties of the recoil and evaporated particle
  EvaporatedParticle->SetDefinition(EvaporatedParticleDef);
  EvaporatedParticle->SetMomentum(pParticle);
  ResidualOut->SetDefinition(RecoilResidual);
  ResidualOut->SetMomentum(pRec);

  if(GetVerboseLevel()>1){
    G4ThreeVector vCM = ResidualOut->GetMomentum()/(ResidualOut->GetMass()+Qevap) - cmv;
    G4ThreeVector pCM = vCM * (ResidualOut->GetMass()+Qevap);
    G4double ECM = 0.5*(ResidualOut->GetMass()+Qevap)*vCM*vCM;
    G4cout << "===========" << G4endl;
    G4cout << "CM Residual Velocity " << vCM << G4endl;
    G4cout << "CM Residual Momentum " << pCM << G4endl;
    G4cout << "CM Residual KE " << ECM << G4endl;

    G4cout << "===========" << G4endl;
    G4cout << "LAB Residual momentum " << ResidualOut->GetMomentum() << G4endl;
    // G4cout << "Sanity Check LAB RESP " << pRec << G4endl;
    G4cout << "LAB Particle momentum " << EvaporatedParticle->GetMomentum() << G4endl;
    // G4cout << "Sanity Check LAB EVPP " << pParticle << G4endl;
    G4cout << "===========" << G4endl;
    G4cout << "LAB Residual KE: " << ResidualOut->GetKineticEnergy() << " MeV" << G4endl;
    G4cout << "LAB Particle KE: " << EvaporatedParticle->GetKineticEnergy() << " MeV" << G4endl;
    G4cout << "===========" << G4endl;
  }
  
  // G4cout << "Evaporated particle energy (MeV): " <<
  // EvaporatedParticle->GetKineticEnergy() << ", angle (deg): " <<
  // acos((EvaporatedParticle->GetMomentum().getZ())/(EvaporatedParticle->GetMomentum().mag()))/degree
  // << G4endl;
  // G4cout << "0 0 0 0 0 0 0 0 0 0 0 0 0 0 " <<
  // EvaporatedParticle->GetKineticEnergy() << " " <<
  // acos((EvaporatedParticle->GetMomentum().getZ())/(EvaporatedParticle->GetMomentum().mag()))/degree
  // << G4endl; //formatted like PACE4 .patricles files
  /*if(ResidualOut->GetKineticEnergy() == 0)
    {
       G4cout << "cmv: " <<  cmv << ", deltaExi: " << deltaExi << ", Q: " <<
    Qevap << G4endl;
       G4cout << "vParticleMag: " <<  vParticleMag << ", particleCMEnergy: " <<
    particleCMEnergy << G4endl;
       G4cout << "Evaporated particle PDG mass: " <<
    EvaporatedParticleDef->GetPDGMass() << G4endl << G4endl;
    }*/
}
//---------------------------------------------------------------------
// Returns the center of mass velocity of the beam-target system
G4ThreeVector ReactionFusEvap::GetCMVelocity(const G4Track &aTrack) {
  G4ThreeVector pIn = aTrack.GetMomentum(); // momentum of incoming particle
  return pIn / (compound->GetPDGMass());    // center of mass velocity
}
//---------------------------------------------------------
// Sets up the decay products of the compound nucleus, including
// any gammas emitted in the residual nucleus cascade.
// CHECK WHETHER CASCADE IS WORKING CORRECTLY
// NUCLEI WITH PROPER EXCITATION ENERGY APPEAR PRESENT WHEN PRINTING TRACK INFO
// BUT IT LOOKS AS THOUGH GAMMAS ARE NOT BEING EMITTED AT THE PROPER TIME
// OR PERHAPS GAMMAS ARE BEING EMITTED WITH LIFETIME FROM A DIFFERENT STEP IN
// THE CASCADE (OR PERHAPS A MIXTURE OF THE LIFETIMES OF THE DIFFERENT STEPS?)
// actually, it still happens even with 1 gamma
// the lifetime appears to match the 1st excited state of 22Ne.  Perhaps Geant4
// is automatically inserting the decay from a table somewhere?
// cheesing excitation energy of residual to 0 doesn't seem to get rid of the
// 2nd peak
// check other nuclei?
// possibly the time recorded in the feature is simply the time of the final
// step in the ion track?
// When changing the backing to G4_C, 2nd peak seems to go away
void ReactionFusEvap::TargetFaceCrossSection() {
  G4cout << "---------- SETUP OF DECAY PRODUCTS ----------" << G4endl;

  // Eexcit = 0.; //0.000001;
  // for(int i = 0; i < numDecays; i++)
  //   Eexcit += Egamma[i] + ( Egamma[i]*Egamma[i] / 2 / (28.*1000.) );//Egamma[i];
  
  // Egammatot = Eexcit; // store the total energy used by gamma emissionDA = 0.;
  DZ = 0.;

  A1 = theProjectile->getA();
  Z1 = theProjectile->getZ();

  switch(theDetector->GetTargetType()){
    case 2:
      //plunger
      A2 = theDetector->GetPlunger()->getTargetMass();
      Z2 = theDetector->GetPlunger()->getTargetCharge();

      A3 = theDetector->GetPlunger()->getStopperMass();
      Z3 = theDetector->GetPlunger()->getStopperCharge();

      targetHasBacking=true;
      break;
    case 1:
      //dsam target
      A2 = theDetector->GetTarget()->getTargetMass();
      Z2 = theDetector->GetTarget()->getTargetCharge();

      A3 = theDetector->GetTarget()->getBackingMass();
      Z3 = theDetector->GetTarget()->getBackingCharge();

      targetHasBacking=true;
      break;
    default:
      //arbitrary target
      A2 = theDetector->GetArbitraryTarget()->getTargetMass(theDetector->GetArbitraryTarget()->getTargetExLayer());
      Z2 = theDetector->GetArbitraryTarget()->getTargetCharge(theDetector->GetArbitraryTarget()->getTargetExLayer());

      if(theDetector->GetArbitraryTarget()->getTargetExLayer() < (theDetector->GetArbitraryTarget()->getNumberOfLayers()-1)){
        A3 = theDetector->GetArbitraryTarget()->getTargetMass(theDetector->GetArbitraryTarget()->getTargetExLayer()+1);
        Z3 = theDetector->GetArbitraryTarget()->getTargetCharge(theDetector->GetArbitraryTarget()->getTargetExLayer()+1);
        targetHasBacking=true;
      }else{
        targetHasBacking=false;
      }
      
      break;
  }

  

  // set properties of the compound (which we assume does not gamma decay)
  compound = G4IonTable::GetIonTable()->GetIon(Z1 + Z2, A1 + A2, 0); // Z2,A2 are set to target charge and mass as defined in Target.cc
  /*G4cout << "target A,Z: " << A2 << "," << Z2 << G4endl;
  G4cout << "compound A,Z: " << compound->GetAtomicMass() << "," <<
  compound->GetAtomicNumber() << G4endl;
  getc(stdin);*/

  DA = nN * neutron->GetAtomicMass() + nP * proton->GetAtomicMass() +
       nA * alpha->GetAtomicMass();
  DZ = nN * neutron->GetAtomicNumber() + nP * proton->GetAtomicNumber() +
       nA * alpha->GetAtomicNumber();

  // check for invalid ions
  if ((Z1 > 1000) || (Z1 < 1)) {
    G4cout << "ERROR: Invalid projectile atomic number: " << Z1 << G4endl;
    G4cout << "Set an appropriate value using /Projectile/Z in the batch file "
              "and try again."
           << G4endl;
    exit(EXIT_FAILURE);
  }
  if ((A1 > 1000) || (A1 < 1)) {
    G4cout << "ERROR: Invalid projectile mass number: " << A1 << G4endl;
    G4cout << "Set an appropriate value using /Projectile/A in the batch file "
              "and try again."
           << G4endl;
    exit(EXIT_FAILURE);
  }
  if ((Z2 > 1000) || (Z2 < 1)) {
    G4cout << "ERROR: Invalid target atomic number: " << Z2 << G4endl;
    G4cout << "Set an appropriate value using /Target/Z in the batch file and "
              "try again."
           << G4endl;
    exit(EXIT_FAILURE);
  }
  if ((A2 > 1000) || (A2 < 1)) {
    G4cout << "ERROR: Invalid target mass number: " << A2 << G4endl;
    G4cout << "Set an appropriate value using /Target/A in the batch file and "
              "try again."
           << G4endl;
    exit(EXIT_FAILURE);
  }
  if(targetHasBacking){
    if ((Z3 > 1000) || (Z3 < 1)) {
      G4cout << "ERROR: Invalid backing atomic number: " << Z3 << G4endl;
      G4cout << "Set an appropriate value using /Backing/Z in the batch file and "
                "try again."
            << G4endl;
      exit(EXIT_FAILURE);
    }
    if ((A3 > 1000) || (A3 < 1)) {
      G4cout << "ERROR: Invalid backing mass number: " << A3 << G4endl;
      G4cout << "Set an appropriate value using /Backing/A in the batch file and "
                "try again."
            << G4endl;
      exit(EXIT_FAILURE);
    }
  }
  
  
  // set properties (including gamma decay processes) of the residual species in
  // the cascade
  G4ProcessManager *default_pm = G4IonTable::GetIonTable()->GetIon(Z1 + Z2 - DZ, A1 + A2 - DA, 0.0)->GetProcessManager();


  Eexcit = 0.;
  for(int i = numDecays-1; i >=0; i--)
    {
      G4cout << "DECAY NUMBER: " << i+1 << G4endl;
      level[i] = G4IonTable::GetIonTable()->GetIon(Z1+Z2-DZ,A1+A2-DA,Eexcit);
      Eexcit += Egamma[i] + (Egamma[i]*Egamma[i] / 2 / level[i]->GetPDGMass());
      G4cout << "Excitation energy before decay " << i+1 << " is " << Eexcit << " [MeV]" << G4endl;
      G4cout << "Excitation energy of final level " << ((G4Ions *)level[i])->GetExcitationEnergy() / keV << " keV" << G4endl;
      G4cout << "Proton number of state " << ((G4Ions *)level[i])->GetAtomicNumber() << G4endl;
      G4cout << "Mass number of state " << ((G4Ions *)level[i])->GetAtomicMass() << G4endl;
    }

  Egammatot = Eexcit;

  
  
  
  if (numDecays > 0)
    {
      // residual[0] = G4IonTable::GetIonTable()->GetIon(Z1 + Z2 - DZ, A1 + Z2 - DA, Eexcit);
      for(int i = 0; i < numDecays; i++)
	{

	  // define the residual species
	  residual[i] = G4IonTable::GetIonTable()->GetIon(Z1 + Z2 - DZ, A1 + A2 - DA, Eexcit);
      
	  if (i > 0)
	    residual[i] = ResDec[i - 1]->GetDaughterNucleus(); // the next residual
	  // nucleus is the
	  // daughter of the
	  // previous one
      
	  //set up process manager (want separate ones for each step since each has its own decay process)
	  ResProcMan[i] = new G4ProcessManager(default_pm[0]);
	  residual[i]->SetProcessManager(ResProcMan[i]);

	  // set up lifetime
	  residual[i]->SetPDGStable(false);
	  residual[i]->SetPDGLifeTime(tau[i]);

	  // set up gamma decay channel
	  ResDecTab[i] = new G4DecayTable();
	  residual[i]->SetDecayTable(ResDecTab[i]);
	  ResDec[i] = new GammaDecayChannel(-1, residual[i], 1, Egamma[i], Eexcit, gammaAngDist);
	  ResDecTab[i]->Insert(ResDec[i]);

	  // ResDecTab[i]->DumpInfo();

	  // make sure that the residual has the decay process in its manager
	  if(residual[i]->GetProcessManager() == NULL)
	    {
	      G4cerr << "Could not find process manager for gamma cascade step "
		     << i + 1 << " of the residual nucleus." << G4endl;
	      exit(EXIT_FAILURE);
	    }
	  decay[i] = new G4Decay();
	  /*if(i>0)
	    if(residual[i]->GetProcessManager()->GetProcessActivation(decay[i-1]) == true)
	    printf("WARNING: previous decay present!!\n");*/
	  if(residual[i]->GetProcessManager()->GetProcessActivation(decay[i]) == false)
	    {
	      G4cout << "-> adding the residual nucleus decay process for step "
		     << i + 1 << " of the cascade." << G4endl;
	      residual[i]->GetProcessManager()->SetParticleType(residual[i]); // neccesary for decay process to be added successfully
	      residual[i]->GetProcessManager()->AddProcess(decay[i], 1, -1, 5);
	      //residual[i]->GetProcessManager()->RemoveProcess( residual[i]->GetProcessManager()->GetProcessListLength()-1 );
	    }
	  // residual[i]->GetProcessManager()->DumpInfo();

	  //Eexcit -= Egamma[i]; // modify total excitation energy for the next
	  // residual species
	  Eexcit -= (Egamma[i] + (Egamma[i]*Egamma[i] / 2 / residual[i]->GetPDGMass()));
	}
      }
    else
      {
	G4cout << "No decay process specified for the residual nucleus!" << G4endl;
      }

      // print cascade info
      for(int i = 0; i < numDecays; i++)
	{
	  // Print info
	  G4cout << "STEP " << i + 1 << " OF THE CASCADE" << G4endl
		 << "Residual lifetime: " << residual[i]->GetPDGLifeTime() / ns
		 << " ns" << G4endl << "Initial excitation energy: "
		 << ((G4Ions *)residual[i])->GetExcitationEnergy() / keV << " keV"
		 << G4endl << "Gamma decay energy: " << ResDec[i]->GetEGamma() / keV
		 << " keV" << G4endl << "Final excitation energy: "
	         << ResDec[i]->GetDaughterExcitation() / keV << " keV" << G4endl;
	  //ResDecTab[i]->DumpInfo();
	  //residual[i]->GetProcessManager()->DumpInfo();
	}

      G4cout << "---------- END OF DECAY PRODUCT SETUP ----------" << G4endl;
    // getc(stdin);
    }
  //---------------------------------------------------------
  // Adds a decay to the residual nucleus gamma cascade.  Must be called before
  // TargetFaceCrossSection()
  void ReactionFusEvap::AddDecay(G4double E, G4double T) {
    if(numDecays < MAXNUMDECAYS){
      Egamma[numDecays] = E;
      tau[numDecays] = T;
      numDecays++;
    }else{
      G4cout << "ERROR: Too many gammas added to the residual nucleus cascade, "
	"maximum number is "
	     << MAXNUMDECAYS << " (change in Reaction.hh)." << G4endl;
      exit(EXIT_FAILURE);
    }
  }

  G4double ReactionFusEvap::getExi(G4double V, G4double kT) {
    G4double exi=0.0;
    // G4double r=(G4double)rand()/(G4double)RAND_MAX;
    G4double r=RandFlat::shoot();
    vector<vector<G4double>>::iterator it1;
    vector<G4double>::iterator it2;
    G4double r_min=0,r_max,x_min=0,x_max;
    G4double x=0.0;
  
    it1=FELookupTable.end()-1;
    it2=(*it1).begin();
    r_max=*(it2);
    if(r>=r_max){
      G4cout<<"r greater than "<<r_max<<G4endl;
      // srand(time(NULL));
      x=*(it2+1);
      exi=kT*x;
      exi+=V;
      return exi;
    }
  
    for(it1=FELookupTable.begin();it1 != FELookupTable.end(); it1++){
      it2=(*it1).begin();
      r_max=*(it2);
      if(r<r_max){
	x_max=*(it2+1);
	x=x_min + (r-r_min)*(x_max-x_min)/(r_max-r_min);
	exi=kT*x;
	exi+=V;

	// exi=V+kT*x;
	// G4cout<<"Rand is: "<<r<<G4endl;
	// G4cout<<"Rmin: "<<r_min<<" Rmax: "<<r_max<<G4endl;
	// G4cout<<"Xmin: "<<x_min<<" Xmax: "<<x_max<<G4endl;
	// G4cout<<"X: "<<x<<G4endl;
      
	// G4cout<<"Rand is: "<<ra<<" R is: "<<r<<" and X is: "<<x<<G4endl;
	// getc(stdin);
      
	// G4cout<<"exi is: "<<std::setprecision(5)<<exi<<G4endl;
	// getc(stdin);
	return exi;
      }
      r_min=*(it2);
      x_min=*(it2+1);
    }
    G4cout<<"Some form of error"<<G4endl;
    G4cout<<"R is: "<<std::setprecision(10)<<(r)<<G4endl;
    return exi;
}

//---------------------------------------------------------
// Sets up the reaction
// Call this after all reaction parameters have been set
void ReactionFusEvap::SetupReaction() {
  G4cout << "---> Setting up the reaction." << G4endl;
  TargetFaceCrossSection();
  G4cout << "---> Reaction setup completed." << G4endl;
  G4cout << "---> BEAM PROPERTIES:     A = " << A1 << ", Z = " << Z1 << ", N = " << A1 - Z1 << G4endl;
  G4cout << "---> TARGET PROPERTIES:   A = " << A2 << ", Z = " << Z2 << ", N = " << A2 - Z2 << G4endl;
  if(targetHasBacking)
    G4cout << "---> BACKING PROPERTIES:  A = " << A3 << ", Z = " << Z3 << ", N = " << A3 - Z3 << G4endl;
  G4cout << "---> COMPOUND PROPERTIES: A = " << A1 + A2 << ", Z = " << Z1 + Z2 << ", N = " << A1 + A2 - Z1 - Z2 << G4endl;
  G4cout << "---> RESIDUAL PROPERTIES: A = " << A1 + A2 - DA << ", Z = " << Z1 + Z2 - DZ << ", N = " << A1 + A2 - DA - Z1 - Z2 + DZ << G4endl;
  // getc(stdin);
}
//---------------------------------------------------------
// Reads in a list of tabulated centre-of-mass energy values
void ReactionFusEvap::ReadTabulatedExi(G4String fileName){
  FILE *table;
  char str[256],str1[256],str2[256];
  int index=0;
  numTabulatedExiVals=0;
  if((table=fopen(fileName.c_str(),"r"))==NULL){
    printf("ERROR: Cannot open the tabulated dExi file %s!\n",fileName.c_str());
    exit(EXIT_FAILURE);
  }
  while(!(feof(table))){//go until the end of file is reached
    if(fgets(str,256,table)!=NULL){
      sscanf(str,"%s %s",str1,str2);
      if(strcmp(str1,"<END>")==0)
        break;
      if(index >= MAXEXIDISTENTRIES){
        printf("WARNING: too many entries in tabulated dExi file %s, truncating...\n",fileName.c_str());
        break;
      }
      exitDistE[index] = atof(str1);
      exiDistCounts[index] = atof(str2);
      index++;
    }
  }
  numTabulatedExiVals=index;

  //make cumulative distribution
  double totalCounts = 0.0;
  for(int i=0;i<numTabulatedExiVals;i++){
    totalCounts += exiDistCounts[i];
  }
  for(int i=0;i<numTabulatedExiVals;i++){
    exiDistCounts[i] = exiDistCounts[i]/totalCounts; //normalize
  }
  double totalSoFar = 0.0;
  for(int i=0;i<numTabulatedExiVals;i++){
    totalSoFar += exiDistCounts[i];
    exiDistCounts[i] = totalSoFar;
  }

  /*printf("Energy (MeV)    Dist Value\n");
  for(int i=0;i<numTabulatedExiVals;i++){
    printf("%f   %f\n",exitDistE[i],exiDistCounts[i]);
  }*/

	fclose(table);
  //getc(stdin);

}
//---------------------------------------------------------
// Gets a tabulated Exi value
// Tabulated values are centre-of-mass energies, must be corrected for the Q value
G4double ReactionFusEvap::getTabulatedExi(G4double Qval){
  double roll = CLHEP::RandFlat::shoot();
  double roll2 = CLHEP::RandFlat::shoot();
  double exi = 0.0;
  //printf("roll: %f\n",roll);

  for(int i=0;i<numTabulatedExiVals;i++){
    if(exiDistCounts[i] >= roll){
      if(i<(numTabulatedExiVals-1)){
        //choose a random energy within the bin
        exi = exitDistE[i] + roll2*(exitDistE[i+1] - exitDistE[i]);
      }else{
        //set energy to the final bin energy
        exi = exitDistE[i];
      }
      exi -= Qval;
      //printf("exi: %f\n",exi);
      return exi;
    }
  }

  return 0.0;
}
